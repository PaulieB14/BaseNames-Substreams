// @generated
// This file is @generated by prost-build.
/// Registry Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryEvents {
    #[prost(message, repeated, tag="1")]
    pub new_owners: ::prost::alloc::vec::Vec<NewOwner>,
    #[prost(message, repeated, tag="2")]
    pub new_resolvers: ::prost::alloc::vec::Vec<NewResolver>,
    #[prost(message, repeated, tag="3")]
    pub new_ttls: ::prost::alloc::vec::Vec<NewTtl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewOwner {
    #[prost(string, tag="1")]
    pub node: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub label: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="7")]
    pub log_index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewResolver {
    #[prost(string, tag="1")]
    pub node: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub resolver: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="6")]
    pub log_index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewTtl {
    #[prost(string, tag="1")]
    pub node: ::prost::alloc::string::String,
    #[prost(uint64, tag="2")]
    pub ttl: u64,
    #[prost(string, tag="3")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="6")]
    pub log_index: u32,
}
/// Registrar Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistrarEvents {
    #[prost(message, repeated, tag="1")]
    pub name_registered: ::prost::alloc::vec::Vec<NameRegistered>,
    #[prost(message, repeated, tag="2")]
    pub name_renewed: ::prost::alloc::vec::Vec<NameRenewed>,
    #[prost(message, repeated, tag="3")]
    pub transfer: ::prost::alloc::vec::Vec<Transfer>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NameRegistered {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub label: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub owner: ::prost::alloc::string::String,
    #[prost(uint64, tag="4")]
    pub cost: u64,
    #[prost(uint64, tag="5")]
    pub expires: u64,
    #[prost(string, tag="6")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="9")]
    pub log_index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NameRenewed {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub label: ::prost::alloc::string::String,
    #[prost(uint64, tag="3")]
    pub cost: u64,
    #[prost(uint64, tag="4")]
    pub expires: u64,
    #[prost(string, tag="5")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="8")]
    pub log_index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    #[prost(string, tag="1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub to: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="7")]
    pub log_index: u32,
}
/// Controller Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerEvents {
    #[prost(message, repeated, tag="1")]
    pub controller_name_registered: ::prost::alloc::vec::Vec<NameRegistered>,
    #[prost(message, repeated, tag="2")]
    pub controller_name_renewed: ::prost::alloc::vec::Vec<NameRenewed>,
}
/// Reverse Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReverseEvents {
    #[prost(message, repeated, tag="1")]
    pub reverse_claimed: ::prost::alloc::vec::Vec<ReverseClaimed>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReverseClaimed {
    #[prost(string, tag="1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub node: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="7")]
    pub log_index: u32,
}
/// Domain Entity
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Domain {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub label_name: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub label_hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub subdomain_count: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub resolved_address: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub resolver: ::prost::alloc::string::String,
    #[prost(uint64, tag="10")]
    pub ttl: u64,
    #[prost(bool, tag="11")]
    pub is_migrated: bool,
    #[prost(uint64, tag="12")]
    pub created_at: u64,
    #[prost(string, tag="13")]
    pub subdomain_count_updated_at: ::prost::alloc::string::String,
}
/// Registration Entity
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Registration {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub domain: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub registration_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub expiry_date: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub cost: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub label_name: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub label_hash: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub registrant: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub label_owner: ::prost::alloc::string::String,
}
/// Reverse Registration Entity
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReverseRegistration {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub domain: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="7")]
    pub log_index: u32,
}
// @@protoc_insertion_point(module)
