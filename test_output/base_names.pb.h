// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base_names.proto
// Protobuf C++ Version: 5.29.3

#ifndef base_5fnames_2eproto_2epb_2eh
#define base_5fnames_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_base_5fnames_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_base_5fnames_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_base_5fnames_2eproto;
namespace base_names {
namespace v1 {
class ControllerEvents;
struct ControllerEventsDefaultTypeInternal;
extern ControllerEventsDefaultTypeInternal _ControllerEvents_default_instance_;
class Domain;
struct DomainDefaultTypeInternal;
extern DomainDefaultTypeInternal _Domain_default_instance_;
class NameRegistered;
struct NameRegisteredDefaultTypeInternal;
extern NameRegisteredDefaultTypeInternal _NameRegistered_default_instance_;
class NameRenewed;
struct NameRenewedDefaultTypeInternal;
extern NameRenewedDefaultTypeInternal _NameRenewed_default_instance_;
class NewOwner;
struct NewOwnerDefaultTypeInternal;
extern NewOwnerDefaultTypeInternal _NewOwner_default_instance_;
class NewResolver;
struct NewResolverDefaultTypeInternal;
extern NewResolverDefaultTypeInternal _NewResolver_default_instance_;
class NewTTL;
struct NewTTLDefaultTypeInternal;
extern NewTTLDefaultTypeInternal _NewTTL_default_instance_;
class RegistrarEvents;
struct RegistrarEventsDefaultTypeInternal;
extern RegistrarEventsDefaultTypeInternal _RegistrarEvents_default_instance_;
class Registration;
struct RegistrationDefaultTypeInternal;
extern RegistrationDefaultTypeInternal _Registration_default_instance_;
class RegistryEvents;
struct RegistryEventsDefaultTypeInternal;
extern RegistryEventsDefaultTypeInternal _RegistryEvents_default_instance_;
class ReverseClaimed;
struct ReverseClaimedDefaultTypeInternal;
extern ReverseClaimedDefaultTypeInternal _ReverseClaimed_default_instance_;
class ReverseEvents;
struct ReverseEventsDefaultTypeInternal;
extern ReverseEventsDefaultTypeInternal _ReverseEvents_default_instance_;
class ReverseRegistration;
struct ReverseRegistrationDefaultTypeInternal;
extern ReverseRegistrationDefaultTypeInternal _ReverseRegistration_default_instance_;
class Transfer;
struct TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
}  // namespace v1
}  // namespace base_names
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace base_names {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Transfer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  ~Transfer() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Transfer* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Transfer));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transfer(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transfer(const Transfer& from) : Transfer(nullptr, from) {}
  inline Transfer(Transfer&& from) noexcept
      : Transfer(nullptr, std::move(from)) {}
  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
        &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Transfer& a, Transfer& b) { a.Swap(&b); }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transfer* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Transfer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transfer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transfer& from) { Transfer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Transfer* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.Transfer"; }

 protected:
  explicit Transfer(::google::protobuf::Arena* arena);
  Transfer(::google::protobuf::Arena* arena, const Transfer& from);
  Transfer(::google::protobuf::Arena* arena, Transfer&& from) noexcept
      : Transfer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kBlockNumberFieldNumber = 4,
    kBlockHashFieldNumber = 5,
    kTransactionHashFieldNumber = 6,
    kLogIndexFieldNumber = 7,
  };
  // string from = 1;
  void clear_from() ;
  const std::string& from() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from(Arg_&& arg, Args_... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* value);

  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(
      const std::string& value);
  std::string* _internal_mutable_from();

  public:
  // string to = 2;
  void clear_to() ;
  const std::string& to() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to(Arg_&& arg, Args_... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* value);

  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(
      const std::string& value);
  std::string* _internal_mutable_to();

  public:
  // string token_id = 3;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // string block_number = 4;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // string block_hash = 5;
  void clear_block_hash() ;
  const std::string& block_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_hash(Arg_&& arg, Args_... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* value);

  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(
      const std::string& value);
  std::string* _internal_mutable_block_hash();

  public:
  // string transaction_hash = 6;
  void clear_transaction_hash() ;
  const std::string& transaction_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_hash(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_hash();
  PROTOBUF_NODISCARD std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* value);

  private:
  const std::string& _internal_transaction_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_hash(
      const std::string& value);
  std::string* _internal_mutable_transaction_hash();

  public:
  // uint32 log_index = 7;
  void clear_log_index() ;
  ::uint32_t log_index() const;
  void set_log_index(::uint32_t value);

  private:
  ::uint32_t _internal_log_index() const;
  void _internal_set_log_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.Transfer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      83, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transfer& from_msg);
    ::google::protobuf::internal::ArenaStringPtr from_;
    ::google::protobuf::internal::ArenaStringPtr to_;
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    ::google::protobuf::internal::ArenaStringPtr block_hash_;
    ::google::protobuf::internal::ArenaStringPtr transaction_hash_;
    ::uint32_t log_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class ReverseRegistration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.ReverseRegistration) */ {
 public:
  inline ReverseRegistration() : ReverseRegistration(nullptr) {}
  ~ReverseRegistration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReverseRegistration* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReverseRegistration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReverseRegistration(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReverseRegistration(const ReverseRegistration& from) : ReverseRegistration(nullptr, from) {}
  inline ReverseRegistration(ReverseRegistration&& from) noexcept
      : ReverseRegistration(nullptr, std::move(from)) {}
  inline ReverseRegistration& operator=(const ReverseRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReverseRegistration& operator=(ReverseRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReverseRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReverseRegistration* internal_default_instance() {
    return reinterpret_cast<const ReverseRegistration*>(
        &_ReverseRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(ReverseRegistration& a, ReverseRegistration& b) { a.Swap(&b); }
  inline void Swap(ReverseRegistration* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReverseRegistration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReverseRegistration* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReverseRegistration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReverseRegistration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReverseRegistration& from) { ReverseRegistration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReverseRegistration* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.ReverseRegistration"; }

 protected:
  explicit ReverseRegistration(::google::protobuf::Arena* arena);
  ReverseRegistration(::google::protobuf::Arena* arena, const ReverseRegistration& from);
  ReverseRegistration(::google::protobuf::Arena* arena, ReverseRegistration&& from) noexcept
      : ReverseRegistration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kDomainFieldNumber = 2,
    kAddressFieldNumber = 3,
    kBlockNumberFieldNumber = 4,
    kBlockHashFieldNumber = 5,
    kTransactionHashFieldNumber = 6,
    kLogIndexFieldNumber = 7,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string domain = 2;
  void clear_domain() ;
  const std::string& domain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domain(Arg_&& arg, Args_... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* value);

  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(
      const std::string& value);
  std::string* _internal_mutable_domain();

  public:
  // string address = 3;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string block_number = 4;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // string block_hash = 5;
  void clear_block_hash() ;
  const std::string& block_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_hash(Arg_&& arg, Args_... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* value);

  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(
      const std::string& value);
  std::string* _internal_mutable_block_hash();

  public:
  // string transaction_hash = 6;
  void clear_transaction_hash() ;
  const std::string& transaction_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_hash(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_hash();
  PROTOBUF_NODISCARD std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* value);

  private:
  const std::string& _internal_transaction_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_hash(
      const std::string& value);
  std::string* _internal_mutable_transaction_hash();

  public:
  // uint32 log_index = 7;
  void clear_log_index() ;
  ::uint32_t log_index() const;
  void set_log_index(::uint32_t value);

  private:
  ::uint32_t _internal_log_index() const;
  void _internal_set_log_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.ReverseRegistration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      95, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReverseRegistration& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr domain_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    ::google::protobuf::internal::ArenaStringPtr block_hash_;
    ::google::protobuf::internal::ArenaStringPtr transaction_hash_;
    ::uint32_t log_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class ReverseClaimed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.ReverseClaimed) */ {
 public:
  inline ReverseClaimed() : ReverseClaimed(nullptr) {}
  ~ReverseClaimed() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReverseClaimed* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReverseClaimed));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReverseClaimed(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReverseClaimed(const ReverseClaimed& from) : ReverseClaimed(nullptr, from) {}
  inline ReverseClaimed(ReverseClaimed&& from) noexcept
      : ReverseClaimed(nullptr, std::move(from)) {}
  inline ReverseClaimed& operator=(const ReverseClaimed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReverseClaimed& operator=(ReverseClaimed&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReverseClaimed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReverseClaimed* internal_default_instance() {
    return reinterpret_cast<const ReverseClaimed*>(
        &_ReverseClaimed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ReverseClaimed& a, ReverseClaimed& b) { a.Swap(&b); }
  inline void Swap(ReverseClaimed* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReverseClaimed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReverseClaimed* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReverseClaimed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReverseClaimed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReverseClaimed& from) { ReverseClaimed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReverseClaimed* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.ReverseClaimed"; }

 protected:
  explicit ReverseClaimed(::google::protobuf::Arena* arena);
  ReverseClaimed(::google::protobuf::Arena* arena, const ReverseClaimed& from);
  ReverseClaimed(::google::protobuf::Arena* arena, ReverseClaimed&& from) noexcept
      : ReverseClaimed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddrFieldNumber = 1,
    kNodeFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kBlockNumberFieldNumber = 4,
    kBlockHashFieldNumber = 5,
    kTransactionHashFieldNumber = 6,
    kLogIndexFieldNumber = 7,
  };
  // string addr = 1;
  void clear_addr() ;
  const std::string& addr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_addr(Arg_&& arg, Args_... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* value);

  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(
      const std::string& value);
  std::string* _internal_mutable_addr();

  public:
  // string node = 2;
  void clear_node() ;
  const std::string& node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node(Arg_&& arg, Args_... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* value);

  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(
      const std::string& value);
  std::string* _internal_mutable_node();

  public:
  // string owner = 3;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // string block_number = 4;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // string block_hash = 5;
  void clear_block_hash() ;
  const std::string& block_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_hash(Arg_&& arg, Args_... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* value);

  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(
      const std::string& value);
  std::string* _internal_mutable_block_hash();

  public:
  // string transaction_hash = 6;
  void clear_transaction_hash() ;
  const std::string& transaction_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_hash(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_hash();
  PROTOBUF_NODISCARD std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* value);

  private:
  const std::string& _internal_transaction_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_hash(
      const std::string& value);
  std::string* _internal_mutable_transaction_hash();

  public:
  // uint32 log_index = 7;
  void clear_log_index() ;
  ::uint32_t log_index() const;
  void set_log_index(::uint32_t value);

  private:
  ::uint32_t _internal_log_index() const;
  void _internal_set_log_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.ReverseClaimed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      88, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReverseClaimed& from_msg);
    ::google::protobuf::internal::ArenaStringPtr addr_;
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    ::google::protobuf::internal::ArenaStringPtr block_hash_;
    ::google::protobuf::internal::ArenaStringPtr transaction_hash_;
    ::uint32_t log_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class Registration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.Registration) */ {
 public:
  inline Registration() : Registration(nullptr) {}
  ~Registration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Registration* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Registration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Registration(
      ::google::protobuf::internal::ConstantInitialized);

  inline Registration(const Registration& from) : Registration(nullptr, from) {}
  inline Registration(Registration&& from) noexcept
      : Registration(nullptr, std::move(from)) {}
  inline Registration& operator=(const Registration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Registration& operator=(Registration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Registration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Registration* internal_default_instance() {
    return reinterpret_cast<const Registration*>(
        &_Registration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Registration& a, Registration& b) { a.Swap(&b); }
  inline void Swap(Registration* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Registration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Registration* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Registration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Registration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Registration& from) { Registration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Registration* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.Registration"; }

 protected:
  explicit Registration(::google::protobuf::Arena* arena);
  Registration(::google::protobuf::Arena* arena, const Registration& from);
  Registration(::google::protobuf::Arena* arena, Registration&& from) noexcept
      : Registration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kDomainFieldNumber = 2,
    kRegistrationDateFieldNumber = 3,
    kExpiryDateFieldNumber = 4,
    kCostFieldNumber = 5,
    kLabelNameFieldNumber = 6,
    kLabelHashFieldNumber = 7,
    kRegistrantFieldNumber = 8,
    kLabelOwnerFieldNumber = 9,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string domain = 2;
  void clear_domain() ;
  const std::string& domain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domain(Arg_&& arg, Args_... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* value);

  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(
      const std::string& value);
  std::string* _internal_mutable_domain();

  public:
  // string registration_date = 3;
  void clear_registration_date() ;
  const std::string& registration_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_registration_date(Arg_&& arg, Args_... args);
  std::string* mutable_registration_date();
  PROTOBUF_NODISCARD std::string* release_registration_date();
  void set_allocated_registration_date(std::string* value);

  private:
  const std::string& _internal_registration_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_registration_date(
      const std::string& value);
  std::string* _internal_mutable_registration_date();

  public:
  // string expiry_date = 4;
  void clear_expiry_date() ;
  const std::string& expiry_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiry_date(Arg_&& arg, Args_... args);
  std::string* mutable_expiry_date();
  PROTOBUF_NODISCARD std::string* release_expiry_date();
  void set_allocated_expiry_date(std::string* value);

  private:
  const std::string& _internal_expiry_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry_date(
      const std::string& value);
  std::string* _internal_mutable_expiry_date();

  public:
  // string cost = 5;
  void clear_cost() ;
  const std::string& cost() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cost(Arg_&& arg, Args_... args);
  std::string* mutable_cost();
  PROTOBUF_NODISCARD std::string* release_cost();
  void set_allocated_cost(std::string* value);

  private:
  const std::string& _internal_cost() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cost(
      const std::string& value);
  std::string* _internal_mutable_cost();

  public:
  // string label_name = 6;
  void clear_label_name() ;
  const std::string& label_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label_name(Arg_&& arg, Args_... args);
  std::string* mutable_label_name();
  PROTOBUF_NODISCARD std::string* release_label_name();
  void set_allocated_label_name(std::string* value);

  private:
  const std::string& _internal_label_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_name(
      const std::string& value);
  std::string* _internal_mutable_label_name();

  public:
  // string label_hash = 7;
  void clear_label_hash() ;
  const std::string& label_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label_hash(Arg_&& arg, Args_... args);
  std::string* mutable_label_hash();
  PROTOBUF_NODISCARD std::string* release_label_hash();
  void set_allocated_label_hash(std::string* value);

  private:
  const std::string& _internal_label_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_hash(
      const std::string& value);
  std::string* _internal_mutable_label_hash();

  public:
  // string registrant = 8;
  void clear_registrant() ;
  const std::string& registrant() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_registrant(Arg_&& arg, Args_... args);
  std::string* mutable_registrant();
  PROTOBUF_NODISCARD std::string* release_registrant();
  void set_allocated_registrant(std::string* value);

  private:
  const std::string& _internal_registrant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_registrant(
      const std::string& value);
  std::string* _internal_mutable_registrant();

  public:
  // string label_owner = 9;
  void clear_label_owner() ;
  const std::string& label_owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label_owner(Arg_&& arg, Args_... args);
  std::string* mutable_label_owner();
  PROTOBUF_NODISCARD std::string* release_label_owner();
  void set_allocated_label_owner(std::string* value);

  private:
  const std::string& _internal_label_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_owner(
      const std::string& value);
  std::string* _internal_mutable_label_owner();

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.Registration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      124, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Registration& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr domain_;
    ::google::protobuf::internal::ArenaStringPtr registration_date_;
    ::google::protobuf::internal::ArenaStringPtr expiry_date_;
    ::google::protobuf::internal::ArenaStringPtr cost_;
    ::google::protobuf::internal::ArenaStringPtr label_name_;
    ::google::protobuf::internal::ArenaStringPtr label_hash_;
    ::google::protobuf::internal::ArenaStringPtr registrant_;
    ::google::protobuf::internal::ArenaStringPtr label_owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class NewTTL final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.NewTTL) */ {
 public:
  inline NewTTL() : NewTTL(nullptr) {}
  ~NewTTL() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NewTTL* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NewTTL));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewTTL(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewTTL(const NewTTL& from) : NewTTL(nullptr, from) {}
  inline NewTTL(NewTTL&& from) noexcept
      : NewTTL(nullptr, std::move(from)) {}
  inline NewTTL& operator=(const NewTTL& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewTTL& operator=(NewTTL&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewTTL& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewTTL* internal_default_instance() {
    return reinterpret_cast<const NewTTL*>(
        &_NewTTL_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(NewTTL& a, NewTTL& b) { a.Swap(&b); }
  inline void Swap(NewTTL* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewTTL* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewTTL* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NewTTL>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewTTL& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewTTL& from) { NewTTL::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NewTTL* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.NewTTL"; }

 protected:
  explicit NewTTL(::google::protobuf::Arena* arena);
  NewTTL(::google::protobuf::Arena* arena, const NewTTL& from);
  NewTTL(::google::protobuf::Arena* arena, NewTTL&& from) noexcept
      : NewTTL(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeFieldNumber = 1,
    kBlockNumberFieldNumber = 3,
    kBlockHashFieldNumber = 4,
    kTransactionHashFieldNumber = 5,
    kTtlFieldNumber = 2,
    kLogIndexFieldNumber = 6,
  };
  // string node = 1;
  void clear_node() ;
  const std::string& node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node(Arg_&& arg, Args_... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* value);

  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(
      const std::string& value);
  std::string* _internal_mutable_node();

  public:
  // string block_number = 3;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // string block_hash = 4;
  void clear_block_hash() ;
  const std::string& block_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_hash(Arg_&& arg, Args_... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* value);

  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(
      const std::string& value);
  std::string* _internal_mutable_block_hash();

  public:
  // string transaction_hash = 5;
  void clear_transaction_hash() ;
  const std::string& transaction_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_hash(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_hash();
  PROTOBUF_NODISCARD std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* value);

  private:
  const std::string& _internal_transaction_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_hash(
      const std::string& value);
  std::string* _internal_mutable_transaction_hash();

  public:
  // uint64 ttl = 2;
  void clear_ttl() ;
  ::uint64_t ttl() const;
  void set_ttl(::uint64_t value);

  private:
  ::uint64_t _internal_ttl() const;
  void _internal_set_ttl(::uint64_t value);

  public:
  // uint32 log_index = 6;
  void clear_log_index() ;
  ::uint32_t log_index() const;
  void set_log_index(::uint32_t value);

  private:
  ::uint32_t _internal_log_index() const;
  void _internal_set_log_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.NewTTL)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewTTL& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    ::google::protobuf::internal::ArenaStringPtr block_hash_;
    ::google::protobuf::internal::ArenaStringPtr transaction_hash_;
    ::uint64_t ttl_;
    ::uint32_t log_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class NewResolver final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.NewResolver) */ {
 public:
  inline NewResolver() : NewResolver(nullptr) {}
  ~NewResolver() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NewResolver* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NewResolver));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewResolver(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewResolver(const NewResolver& from) : NewResolver(nullptr, from) {}
  inline NewResolver(NewResolver&& from) noexcept
      : NewResolver(nullptr, std::move(from)) {}
  inline NewResolver& operator=(const NewResolver& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewResolver& operator=(NewResolver&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewResolver& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewResolver* internal_default_instance() {
    return reinterpret_cast<const NewResolver*>(
        &_NewResolver_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NewResolver& a, NewResolver& b) { a.Swap(&b); }
  inline void Swap(NewResolver* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewResolver* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewResolver* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NewResolver>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewResolver& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewResolver& from) { NewResolver::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NewResolver* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.NewResolver"; }

 protected:
  explicit NewResolver(::google::protobuf::Arena* arena);
  NewResolver(::google::protobuf::Arena* arena, const NewResolver& from);
  NewResolver(::google::protobuf::Arena* arena, NewResolver&& from) noexcept
      : NewResolver(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeFieldNumber = 1,
    kResolverFieldNumber = 2,
    kBlockNumberFieldNumber = 3,
    kBlockHashFieldNumber = 4,
    kTransactionHashFieldNumber = 5,
    kLogIndexFieldNumber = 6,
  };
  // string node = 1;
  void clear_node() ;
  const std::string& node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node(Arg_&& arg, Args_... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* value);

  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(
      const std::string& value);
  std::string* _internal_mutable_node();

  public:
  // string resolver = 2;
  void clear_resolver() ;
  const std::string& resolver() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolver(Arg_&& arg, Args_... args);
  std::string* mutable_resolver();
  PROTOBUF_NODISCARD std::string* release_resolver();
  void set_allocated_resolver(std::string* value);

  private:
  const std::string& _internal_resolver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolver(
      const std::string& value);
  std::string* _internal_mutable_resolver();

  public:
  // string block_number = 3;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // string block_hash = 4;
  void clear_block_hash() ;
  const std::string& block_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_hash(Arg_&& arg, Args_... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* value);

  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(
      const std::string& value);
  std::string* _internal_mutable_block_hash();

  public:
  // string transaction_hash = 5;
  void clear_transaction_hash() ;
  const std::string& transaction_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_hash(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_hash();
  PROTOBUF_NODISCARD std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* value);

  private:
  const std::string& _internal_transaction_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_hash(
      const std::string& value);
  std::string* _internal_mutable_transaction_hash();

  public:
  // uint32 log_index = 6;
  void clear_log_index() ;
  ::uint32_t log_index() const;
  void set_log_index(::uint32_t value);

  private:
  ::uint32_t _internal_log_index() const;
  void _internal_set_log_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.NewResolver)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewResolver& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::google::protobuf::internal::ArenaStringPtr resolver_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    ::google::protobuf::internal::ArenaStringPtr block_hash_;
    ::google::protobuf::internal::ArenaStringPtr transaction_hash_;
    ::uint32_t log_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class NewOwner final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.NewOwner) */ {
 public:
  inline NewOwner() : NewOwner(nullptr) {}
  ~NewOwner() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NewOwner* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NewOwner));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewOwner(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewOwner(const NewOwner& from) : NewOwner(nullptr, from) {}
  inline NewOwner(NewOwner&& from) noexcept
      : NewOwner(nullptr, std::move(from)) {}
  inline NewOwner& operator=(const NewOwner& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewOwner& operator=(NewOwner&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewOwner& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewOwner* internal_default_instance() {
    return reinterpret_cast<const NewOwner*>(
        &_NewOwner_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NewOwner& a, NewOwner& b) { a.Swap(&b); }
  inline void Swap(NewOwner* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewOwner* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewOwner* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NewOwner>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewOwner& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewOwner& from) { NewOwner::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NewOwner* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.NewOwner"; }

 protected:
  explicit NewOwner(::google::protobuf::Arena* arena);
  NewOwner(::google::protobuf::Arena* arena, const NewOwner& from);
  NewOwner(::google::protobuf::Arena* arena, NewOwner&& from) noexcept
      : NewOwner(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeFieldNumber = 1,
    kLabelFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kBlockNumberFieldNumber = 4,
    kBlockHashFieldNumber = 5,
    kTransactionHashFieldNumber = 6,
    kLogIndexFieldNumber = 7,
  };
  // string node = 1;
  void clear_node() ;
  const std::string& node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node(Arg_&& arg, Args_... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* value);

  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(
      const std::string& value);
  std::string* _internal_mutable_node();

  public:
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string owner = 3;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // string block_number = 4;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // string block_hash = 5;
  void clear_block_hash() ;
  const std::string& block_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_hash(Arg_&& arg, Args_... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* value);

  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(
      const std::string& value);
  std::string* _internal_mutable_block_hash();

  public:
  // string transaction_hash = 6;
  void clear_transaction_hash() ;
  const std::string& transaction_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_hash(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_hash();
  PROTOBUF_NODISCARD std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* value);

  private:
  const std::string& _internal_transaction_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_hash(
      const std::string& value);
  std::string* _internal_mutable_transaction_hash();

  public:
  // uint32 log_index = 7;
  void clear_log_index() ;
  ::uint32_t log_index() const;
  void set_log_index(::uint32_t value);

  private:
  ::uint32_t _internal_log_index() const;
  void _internal_set_log_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.NewOwner)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      83, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewOwner& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    ::google::protobuf::internal::ArenaStringPtr block_hash_;
    ::google::protobuf::internal::ArenaStringPtr transaction_hash_;
    ::uint32_t log_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class NameRenewed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.NameRenewed) */ {
 public:
  inline NameRenewed() : NameRenewed(nullptr) {}
  ~NameRenewed() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NameRenewed* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NameRenewed));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NameRenewed(
      ::google::protobuf::internal::ConstantInitialized);

  inline NameRenewed(const NameRenewed& from) : NameRenewed(nullptr, from) {}
  inline NameRenewed(NameRenewed&& from) noexcept
      : NameRenewed(nullptr, std::move(from)) {}
  inline NameRenewed& operator=(const NameRenewed& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameRenewed& operator=(NameRenewed&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameRenewed& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameRenewed* internal_default_instance() {
    return reinterpret_cast<const NameRenewed*>(
        &_NameRenewed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(NameRenewed& a, NameRenewed& b) { a.Swap(&b); }
  inline void Swap(NameRenewed* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameRenewed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NameRenewed* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NameRenewed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NameRenewed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NameRenewed& from) { NameRenewed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NameRenewed* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.NameRenewed"; }

 protected:
  explicit NameRenewed(::google::protobuf::Arena* arena);
  NameRenewed(::google::protobuf::Arena* arena, const NameRenewed& from);
  NameRenewed(::google::protobuf::Arena* arena, NameRenewed&& from) noexcept
      : NameRenewed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kLabelFieldNumber = 2,
    kBlockNumberFieldNumber = 5,
    kBlockHashFieldNumber = 6,
    kTransactionHashFieldNumber = 7,
    kCostFieldNumber = 3,
    kExpiresFieldNumber = 4,
    kLogIndexFieldNumber = 8,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string block_number = 5;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // string block_hash = 6;
  void clear_block_hash() ;
  const std::string& block_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_hash(Arg_&& arg, Args_... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* value);

  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(
      const std::string& value);
  std::string* _internal_mutable_block_hash();

  public:
  // string transaction_hash = 7;
  void clear_transaction_hash() ;
  const std::string& transaction_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_hash(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_hash();
  PROTOBUF_NODISCARD std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* value);

  private:
  const std::string& _internal_transaction_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_hash(
      const std::string& value);
  std::string* _internal_mutable_transaction_hash();

  public:
  // uint64 cost = 3;
  void clear_cost() ;
  ::uint64_t cost() const;
  void set_cost(::uint64_t value);

  private:
  ::uint64_t _internal_cost() const;
  void _internal_set_cost(::uint64_t value);

  public:
  // uint64 expires = 4;
  void clear_expires() ;
  ::uint64_t expires() const;
  void set_expires(::uint64_t value);

  private:
  ::uint64_t _internal_expires() const;
  void _internal_set_expires(::uint64_t value);

  public:
  // uint32 log_index = 8;
  void clear_log_index() ;
  ::uint32_t log_index() const;
  void set_log_index(::uint32_t value);

  private:
  ::uint32_t _internal_log_index() const;
  void _internal_set_log_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.NameRenewed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      89, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NameRenewed& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    ::google::protobuf::internal::ArenaStringPtr block_hash_;
    ::google::protobuf::internal::ArenaStringPtr transaction_hash_;
    ::uint64_t cost_;
    ::uint64_t expires_;
    ::uint32_t log_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class NameRegistered final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.NameRegistered) */ {
 public:
  inline NameRegistered() : NameRegistered(nullptr) {}
  ~NameRegistered() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NameRegistered* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NameRegistered));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NameRegistered(
      ::google::protobuf::internal::ConstantInitialized);

  inline NameRegistered(const NameRegistered& from) : NameRegistered(nullptr, from) {}
  inline NameRegistered(NameRegistered&& from) noexcept
      : NameRegistered(nullptr, std::move(from)) {}
  inline NameRegistered& operator=(const NameRegistered& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameRegistered& operator=(NameRegistered&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameRegistered& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameRegistered* internal_default_instance() {
    return reinterpret_cast<const NameRegistered*>(
        &_NameRegistered_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(NameRegistered& a, NameRegistered& b) { a.Swap(&b); }
  inline void Swap(NameRegistered* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameRegistered* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NameRegistered* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NameRegistered>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NameRegistered& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NameRegistered& from) { NameRegistered::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NameRegistered* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.NameRegistered"; }

 protected:
  explicit NameRegistered(::google::protobuf::Arena* arena);
  NameRegistered(::google::protobuf::Arena* arena, const NameRegistered& from);
  NameRegistered(::google::protobuf::Arena* arena, NameRegistered&& from) noexcept
      : NameRegistered(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kLabelFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kBlockNumberFieldNumber = 6,
    kBlockHashFieldNumber = 7,
    kTransactionHashFieldNumber = 8,
    kCostFieldNumber = 4,
    kExpiresFieldNumber = 5,
    kLogIndexFieldNumber = 9,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string owner = 3;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // string block_number = 6;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // string block_hash = 7;
  void clear_block_hash() ;
  const std::string& block_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_hash(Arg_&& arg, Args_... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* value);

  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(
      const std::string& value);
  std::string* _internal_mutable_block_hash();

  public:
  // string transaction_hash = 8;
  void clear_transaction_hash() ;
  const std::string& transaction_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_hash(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_hash();
  PROTOBUF_NODISCARD std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* value);

  private:
  const std::string& _internal_transaction_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_hash(
      const std::string& value);
  std::string* _internal_mutable_transaction_hash();

  public:
  // uint64 cost = 4;
  void clear_cost() ;
  ::uint64_t cost() const;
  void set_cost(::uint64_t value);

  private:
  ::uint64_t _internal_cost() const;
  void _internal_set_cost(::uint64_t value);

  public:
  // uint64 expires = 5;
  void clear_expires() ;
  ::uint64_t expires() const;
  void set_expires(::uint64_t value);

  private:
  ::uint64_t _internal_expires() const;
  void _internal_set_expires(::uint64_t value);

  public:
  // uint32 log_index = 9;
  void clear_log_index() ;
  ::uint32_t log_index() const;
  void set_log_index(::uint32_t value);

  private:
  ::uint32_t _internal_log_index() const;
  void _internal_set_log_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.NameRegistered)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      97, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NameRegistered& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    ::google::protobuf::internal::ArenaStringPtr block_hash_;
    ::google::protobuf::internal::ArenaStringPtr transaction_hash_;
    ::uint64_t cost_;
    ::uint64_t expires_;
    ::uint32_t log_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class Domain final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.Domain) */ {
 public:
  inline Domain() : Domain(nullptr) {}
  ~Domain() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Domain* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Domain));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Domain(
      ::google::protobuf::internal::ConstantInitialized);

  inline Domain(const Domain& from) : Domain(nullptr, from) {}
  inline Domain(Domain&& from) noexcept
      : Domain(nullptr, std::move(from)) {}
  inline Domain& operator=(const Domain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Domain& operator=(Domain&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Domain& default_instance() {
    return *internal_default_instance();
  }
  static inline const Domain* internal_default_instance() {
    return reinterpret_cast<const Domain*>(
        &_Domain_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Domain& a, Domain& b) { a.Swap(&b); }
  inline void Swap(Domain* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Domain* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Domain* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Domain>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Domain& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Domain& from) { Domain::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Domain* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.Domain"; }

 protected:
  explicit Domain(::google::protobuf::Arena* arena);
  Domain(::google::protobuf::Arena* arena, const Domain& from);
  Domain(::google::protobuf::Arena* arena, Domain&& from) noexcept
      : Domain(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLabelNameFieldNumber = 3,
    kLabelHashFieldNumber = 4,
    kParentFieldNumber = 5,
    kSubdomainCountFieldNumber = 6,
    kResolvedAddressFieldNumber = 7,
    kOwnerFieldNumber = 8,
    kResolverFieldNumber = 9,
    kSubdomainCountUpdatedAtFieldNumber = 13,
    kTtlFieldNumber = 10,
    kCreatedAtFieldNumber = 12,
    kIsMigratedFieldNumber = 11,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string label_name = 3;
  void clear_label_name() ;
  const std::string& label_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label_name(Arg_&& arg, Args_... args);
  std::string* mutable_label_name();
  PROTOBUF_NODISCARD std::string* release_label_name();
  void set_allocated_label_name(std::string* value);

  private:
  const std::string& _internal_label_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_name(
      const std::string& value);
  std::string* _internal_mutable_label_name();

  public:
  // string label_hash = 4;
  void clear_label_hash() ;
  const std::string& label_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label_hash(Arg_&& arg, Args_... args);
  std::string* mutable_label_hash();
  PROTOBUF_NODISCARD std::string* release_label_hash();
  void set_allocated_label_hash(std::string* value);

  private:
  const std::string& _internal_label_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_hash(
      const std::string& value);
  std::string* _internal_mutable_label_hash();

  public:
  // string parent = 5;
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // string subdomain_count = 6;
  void clear_subdomain_count() ;
  const std::string& subdomain_count() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subdomain_count(Arg_&& arg, Args_... args);
  std::string* mutable_subdomain_count();
  PROTOBUF_NODISCARD std::string* release_subdomain_count();
  void set_allocated_subdomain_count(std::string* value);

  private:
  const std::string& _internal_subdomain_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subdomain_count(
      const std::string& value);
  std::string* _internal_mutable_subdomain_count();

  public:
  // string resolved_address = 7;
  void clear_resolved_address() ;
  const std::string& resolved_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolved_address(Arg_&& arg, Args_... args);
  std::string* mutable_resolved_address();
  PROTOBUF_NODISCARD std::string* release_resolved_address();
  void set_allocated_resolved_address(std::string* value);

  private:
  const std::string& _internal_resolved_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolved_address(
      const std::string& value);
  std::string* _internal_mutable_resolved_address();

  public:
  // string owner = 8;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // string resolver = 9;
  void clear_resolver() ;
  const std::string& resolver() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolver(Arg_&& arg, Args_... args);
  std::string* mutable_resolver();
  PROTOBUF_NODISCARD std::string* release_resolver();
  void set_allocated_resolver(std::string* value);

  private:
  const std::string& _internal_resolver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolver(
      const std::string& value);
  std::string* _internal_mutable_resolver();

  public:
  // string subdomain_count_updated_at = 13;
  void clear_subdomain_count_updated_at() ;
  const std::string& subdomain_count_updated_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subdomain_count_updated_at(Arg_&& arg, Args_... args);
  std::string* mutable_subdomain_count_updated_at();
  PROTOBUF_NODISCARD std::string* release_subdomain_count_updated_at();
  void set_allocated_subdomain_count_updated_at(std::string* value);

  private:
  const std::string& _internal_subdomain_count_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subdomain_count_updated_at(
      const std::string& value);
  std::string* _internal_mutable_subdomain_count_updated_at();

  public:
  // uint64 ttl = 10;
  void clear_ttl() ;
  ::uint64_t ttl() const;
  void set_ttl(::uint64_t value);

  private:
  ::uint64_t _internal_ttl() const;
  void _internal_set_ttl(::uint64_t value);

  public:
  // uint64 created_at = 12;
  void clear_created_at() ;
  ::uint64_t created_at() const;
  void set_created_at(::uint64_t value);

  private:
  ::uint64_t _internal_created_at() const;
  void _internal_set_created_at(::uint64_t value);

  public:
  // bool is_migrated = 11;
  void clear_is_migrated() ;
  bool is_migrated() const;
  void set_is_migrated(bool value);

  private:
  bool _internal_is_migrated() const;
  void _internal_set_is_migrated(bool value);

  public:
  // @@protoc_insertion_point(class_scope:base_names.v1.Domain)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      139, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Domain& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr label_name_;
    ::google::protobuf::internal::ArenaStringPtr label_hash_;
    ::google::protobuf::internal::ArenaStringPtr parent_;
    ::google::protobuf::internal::ArenaStringPtr subdomain_count_;
    ::google::protobuf::internal::ArenaStringPtr resolved_address_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::ArenaStringPtr resolver_;
    ::google::protobuf::internal::ArenaStringPtr subdomain_count_updated_at_;
    ::uint64_t ttl_;
    ::uint64_t created_at_;
    bool is_migrated_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class ReverseEvents final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.ReverseEvents) */ {
 public:
  inline ReverseEvents() : ReverseEvents(nullptr) {}
  ~ReverseEvents() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReverseEvents* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReverseEvents));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReverseEvents(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReverseEvents(const ReverseEvents& from) : ReverseEvents(nullptr, from) {}
  inline ReverseEvents(ReverseEvents&& from) noexcept
      : ReverseEvents(nullptr, std::move(from)) {}
  inline ReverseEvents& operator=(const ReverseEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReverseEvents& operator=(ReverseEvents&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReverseEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReverseEvents* internal_default_instance() {
    return reinterpret_cast<const ReverseEvents*>(
        &_ReverseEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ReverseEvents& a, ReverseEvents& b) { a.Swap(&b); }
  inline void Swap(ReverseEvents* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReverseEvents* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReverseEvents* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReverseEvents>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReverseEvents& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReverseEvents& from) { ReverseEvents::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReverseEvents* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.ReverseEvents"; }

 protected:
  explicit ReverseEvents(::google::protobuf::Arena* arena);
  ReverseEvents(::google::protobuf::Arena* arena, const ReverseEvents& from);
  ReverseEvents(::google::protobuf::Arena* arena, ReverseEvents&& from) noexcept
      : ReverseEvents(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReverseClaimedFieldNumber = 1,
  };
  // repeated .base_names.v1.ReverseClaimed reverse_claimed = 1;
  int reverse_claimed_size() const;
  private:
  int _internal_reverse_claimed_size() const;

  public:
  void clear_reverse_claimed() ;
  ::base_names::v1::ReverseClaimed* mutable_reverse_claimed(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::ReverseClaimed>* mutable_reverse_claimed();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::ReverseClaimed>& _internal_reverse_claimed() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::ReverseClaimed>* _internal_mutable_reverse_claimed();
  public:
  const ::base_names::v1::ReverseClaimed& reverse_claimed(int index) const;
  ::base_names::v1::ReverseClaimed* add_reverse_claimed();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::ReverseClaimed>& reverse_claimed() const;
  // @@protoc_insertion_point(class_scope:base_names.v1.ReverseEvents)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReverseEvents& from_msg);
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::ReverseClaimed > reverse_claimed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class RegistryEvents final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.RegistryEvents) */ {
 public:
  inline RegistryEvents() : RegistryEvents(nullptr) {}
  ~RegistryEvents() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegistryEvents* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegistryEvents));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegistryEvents(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegistryEvents(const RegistryEvents& from) : RegistryEvents(nullptr, from) {}
  inline RegistryEvents(RegistryEvents&& from) noexcept
      : RegistryEvents(nullptr, std::move(from)) {}
  inline RegistryEvents& operator=(const RegistryEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistryEvents& operator=(RegistryEvents&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegistryEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegistryEvents* internal_default_instance() {
    return reinterpret_cast<const RegistryEvents*>(
        &_RegistryEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RegistryEvents& a, RegistryEvents& b) { a.Swap(&b); }
  inline void Swap(RegistryEvents* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistryEvents* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegistryEvents* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegistryEvents>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegistryEvents& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegistryEvents& from) { RegistryEvents::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegistryEvents* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.RegistryEvents"; }

 protected:
  explicit RegistryEvents(::google::protobuf::Arena* arena);
  RegistryEvents(::google::protobuf::Arena* arena, const RegistryEvents& from);
  RegistryEvents(::google::protobuf::Arena* arena, RegistryEvents&& from) noexcept
      : RegistryEvents(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewOwnersFieldNumber = 1,
    kNewResolversFieldNumber = 2,
    kNewTtlsFieldNumber = 3,
  };
  // repeated .base_names.v1.NewOwner new_owners = 1;
  int new_owners_size() const;
  private:
  int _internal_new_owners_size() const;

  public:
  void clear_new_owners() ;
  ::base_names::v1::NewOwner* mutable_new_owners(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NewOwner>* mutable_new_owners();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewOwner>& _internal_new_owners() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NewOwner>* _internal_mutable_new_owners();
  public:
  const ::base_names::v1::NewOwner& new_owners(int index) const;
  ::base_names::v1::NewOwner* add_new_owners();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewOwner>& new_owners() const;
  // repeated .base_names.v1.NewResolver new_resolvers = 2;
  int new_resolvers_size() const;
  private:
  int _internal_new_resolvers_size() const;

  public:
  void clear_new_resolvers() ;
  ::base_names::v1::NewResolver* mutable_new_resolvers(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NewResolver>* mutable_new_resolvers();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewResolver>& _internal_new_resolvers() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NewResolver>* _internal_mutable_new_resolvers();
  public:
  const ::base_names::v1::NewResolver& new_resolvers(int index) const;
  ::base_names::v1::NewResolver* add_new_resolvers();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewResolver>& new_resolvers() const;
  // repeated .base_names.v1.NewTTL new_ttls = 3;
  int new_ttls_size() const;
  private:
  int _internal_new_ttls_size() const;

  public:
  void clear_new_ttls() ;
  ::base_names::v1::NewTTL* mutable_new_ttls(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NewTTL>* mutable_new_ttls();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewTTL>& _internal_new_ttls() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NewTTL>* _internal_mutable_new_ttls();
  public:
  const ::base_names::v1::NewTTL& new_ttls(int index) const;
  ::base_names::v1::NewTTL* add_new_ttls();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewTTL>& new_ttls() const;
  // @@protoc_insertion_point(class_scope:base_names.v1.RegistryEvents)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegistryEvents& from_msg);
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::NewOwner > new_owners_;
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::NewResolver > new_resolvers_;
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::NewTTL > new_ttls_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class RegistrarEvents final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.RegistrarEvents) */ {
 public:
  inline RegistrarEvents() : RegistrarEvents(nullptr) {}
  ~RegistrarEvents() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegistrarEvents* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegistrarEvents));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegistrarEvents(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegistrarEvents(const RegistrarEvents& from) : RegistrarEvents(nullptr, from) {}
  inline RegistrarEvents(RegistrarEvents&& from) noexcept
      : RegistrarEvents(nullptr, std::move(from)) {}
  inline RegistrarEvents& operator=(const RegistrarEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistrarEvents& operator=(RegistrarEvents&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegistrarEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegistrarEvents* internal_default_instance() {
    return reinterpret_cast<const RegistrarEvents*>(
        &_RegistrarEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RegistrarEvents& a, RegistrarEvents& b) { a.Swap(&b); }
  inline void Swap(RegistrarEvents* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistrarEvents* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegistrarEvents* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegistrarEvents>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegistrarEvents& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegistrarEvents& from) { RegistrarEvents::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegistrarEvents* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.RegistrarEvents"; }

 protected:
  explicit RegistrarEvents(::google::protobuf::Arena* arena);
  RegistrarEvents(::google::protobuf::Arena* arena, const RegistrarEvents& from);
  RegistrarEvents(::google::protobuf::Arena* arena, RegistrarEvents&& from) noexcept
      : RegistrarEvents(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameRegisteredFieldNumber = 1,
    kNameRenewedFieldNumber = 2,
    kTransferFieldNumber = 3,
  };
  // repeated .base_names.v1.NameRegistered name_registered = 1;
  int name_registered_size() const;
  private:
  int _internal_name_registered_size() const;

  public:
  void clear_name_registered() ;
  ::base_names::v1::NameRegistered* mutable_name_registered(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>* mutable_name_registered();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>& _internal_name_registered() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>* _internal_mutable_name_registered();
  public:
  const ::base_names::v1::NameRegistered& name_registered(int index) const;
  ::base_names::v1::NameRegistered* add_name_registered();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>& name_registered() const;
  // repeated .base_names.v1.NameRenewed name_renewed = 2;
  int name_renewed_size() const;
  private:
  int _internal_name_renewed_size() const;

  public:
  void clear_name_renewed() ;
  ::base_names::v1::NameRenewed* mutable_name_renewed(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>* mutable_name_renewed();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>& _internal_name_renewed() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>* _internal_mutable_name_renewed();
  public:
  const ::base_names::v1::NameRenewed& name_renewed(int index) const;
  ::base_names::v1::NameRenewed* add_name_renewed();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>& name_renewed() const;
  // repeated .base_names.v1.Transfer transfer = 3;
  int transfer_size() const;
  private:
  int _internal_transfer_size() const;

  public:
  void clear_transfer() ;
  ::base_names::v1::Transfer* mutable_transfer(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::Transfer>* mutable_transfer();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::Transfer>& _internal_transfer() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::Transfer>* _internal_mutable_transfer();
  public:
  const ::base_names::v1::Transfer& transfer(int index) const;
  ::base_names::v1::Transfer* add_transfer();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::Transfer>& transfer() const;
  // @@protoc_insertion_point(class_scope:base_names.v1.RegistrarEvents)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegistrarEvents& from_msg);
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::NameRegistered > name_registered_;
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::NameRenewed > name_renewed_;
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::Transfer > transfer_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};
// -------------------------------------------------------------------

class ControllerEvents final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:base_names.v1.ControllerEvents) */ {
 public:
  inline ControllerEvents() : ControllerEvents(nullptr) {}
  ~ControllerEvents() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ControllerEvents* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ControllerEvents));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControllerEvents(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControllerEvents(const ControllerEvents& from) : ControllerEvents(nullptr, from) {}
  inline ControllerEvents(ControllerEvents&& from) noexcept
      : ControllerEvents(nullptr, std::move(from)) {}
  inline ControllerEvents& operator=(const ControllerEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerEvents& operator=(ControllerEvents&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerEvents* internal_default_instance() {
    return reinterpret_cast<const ControllerEvents*>(
        &_ControllerEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ControllerEvents& a, ControllerEvents& b) { a.Swap(&b); }
  inline void Swap(ControllerEvents* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerEvents* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerEvents* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ControllerEvents>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControllerEvents& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControllerEvents& from) { ControllerEvents::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ControllerEvents* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "base_names.v1.ControllerEvents"; }

 protected:
  explicit ControllerEvents(::google::protobuf::Arena* arena);
  ControllerEvents(::google::protobuf::Arena* arena, const ControllerEvents& from);
  ControllerEvents(::google::protobuf::Arena* arena, ControllerEvents&& from) noexcept
      : ControllerEvents(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControllerNameRegisteredFieldNumber = 1,
    kControllerNameRenewedFieldNumber = 2,
  };
  // repeated .base_names.v1.NameRegistered controller_name_registered = 1;
  int controller_name_registered_size() const;
  private:
  int _internal_controller_name_registered_size() const;

  public:
  void clear_controller_name_registered() ;
  ::base_names::v1::NameRegistered* mutable_controller_name_registered(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>* mutable_controller_name_registered();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>& _internal_controller_name_registered() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>* _internal_mutable_controller_name_registered();
  public:
  const ::base_names::v1::NameRegistered& controller_name_registered(int index) const;
  ::base_names::v1::NameRegistered* add_controller_name_registered();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>& controller_name_registered() const;
  // repeated .base_names.v1.NameRenewed controller_name_renewed = 2;
  int controller_name_renewed_size() const;
  private:
  int _internal_controller_name_renewed_size() const;

  public:
  void clear_controller_name_renewed() ;
  ::base_names::v1::NameRenewed* mutable_controller_name_renewed(int index);
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>* mutable_controller_name_renewed();

  private:
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>& _internal_controller_name_renewed() const;
  ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>* _internal_mutable_controller_name_renewed();
  public:
  const ::base_names::v1::NameRenewed& controller_name_renewed(int index) const;
  ::base_names::v1::NameRenewed* add_controller_name_renewed();
  const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>& controller_name_renewed() const;
  // @@protoc_insertion_point(class_scope:base_names.v1.ControllerEvents)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControllerEvents& from_msg);
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::NameRegistered > controller_name_registered_;
    ::google::protobuf::RepeatedPtrField< ::base_names::v1::NameRenewed > controller_name_renewed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fnames_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RegistryEvents

// repeated .base_names.v1.NewOwner new_owners = 1;
inline int RegistryEvents::_internal_new_owners_size() const {
  return _internal_new_owners().size();
}
inline int RegistryEvents::new_owners_size() const {
  return _internal_new_owners_size();
}
inline void RegistryEvents::clear_new_owners() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_owners_.Clear();
}
inline ::base_names::v1::NewOwner* RegistryEvents::mutable_new_owners(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.RegistryEvents.new_owners)
  return _internal_mutable_new_owners()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NewOwner>* RegistryEvents::mutable_new_owners()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.RegistryEvents.new_owners)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_new_owners();
}
inline const ::base_names::v1::NewOwner& RegistryEvents::new_owners(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.RegistryEvents.new_owners)
  return _internal_new_owners().Get(index);
}
inline ::base_names::v1::NewOwner* RegistryEvents::add_new_owners() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::NewOwner* _add = _internal_mutable_new_owners()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.RegistryEvents.new_owners)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewOwner>& RegistryEvents::new_owners() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.RegistryEvents.new_owners)
  return _internal_new_owners();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewOwner>&
RegistryEvents::_internal_new_owners() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_owners_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NewOwner>*
RegistryEvents::_internal_mutable_new_owners() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.new_owners_;
}

// repeated .base_names.v1.NewResolver new_resolvers = 2;
inline int RegistryEvents::_internal_new_resolvers_size() const {
  return _internal_new_resolvers().size();
}
inline int RegistryEvents::new_resolvers_size() const {
  return _internal_new_resolvers_size();
}
inline void RegistryEvents::clear_new_resolvers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_resolvers_.Clear();
}
inline ::base_names::v1::NewResolver* RegistryEvents::mutable_new_resolvers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.RegistryEvents.new_resolvers)
  return _internal_mutable_new_resolvers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NewResolver>* RegistryEvents::mutable_new_resolvers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.RegistryEvents.new_resolvers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_new_resolvers();
}
inline const ::base_names::v1::NewResolver& RegistryEvents::new_resolvers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.RegistryEvents.new_resolvers)
  return _internal_new_resolvers().Get(index);
}
inline ::base_names::v1::NewResolver* RegistryEvents::add_new_resolvers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::NewResolver* _add = _internal_mutable_new_resolvers()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.RegistryEvents.new_resolvers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewResolver>& RegistryEvents::new_resolvers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.RegistryEvents.new_resolvers)
  return _internal_new_resolvers();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewResolver>&
RegistryEvents::_internal_new_resolvers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_resolvers_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NewResolver>*
RegistryEvents::_internal_mutable_new_resolvers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.new_resolvers_;
}

// repeated .base_names.v1.NewTTL new_ttls = 3;
inline int RegistryEvents::_internal_new_ttls_size() const {
  return _internal_new_ttls().size();
}
inline int RegistryEvents::new_ttls_size() const {
  return _internal_new_ttls_size();
}
inline void RegistryEvents::clear_new_ttls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_ttls_.Clear();
}
inline ::base_names::v1::NewTTL* RegistryEvents::mutable_new_ttls(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.RegistryEvents.new_ttls)
  return _internal_mutable_new_ttls()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NewTTL>* RegistryEvents::mutable_new_ttls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.RegistryEvents.new_ttls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_new_ttls();
}
inline const ::base_names::v1::NewTTL& RegistryEvents::new_ttls(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.RegistryEvents.new_ttls)
  return _internal_new_ttls().Get(index);
}
inline ::base_names::v1::NewTTL* RegistryEvents::add_new_ttls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::NewTTL* _add = _internal_mutable_new_ttls()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.RegistryEvents.new_ttls)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewTTL>& RegistryEvents::new_ttls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.RegistryEvents.new_ttls)
  return _internal_new_ttls();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NewTTL>&
RegistryEvents::_internal_new_ttls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_ttls_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NewTTL>*
RegistryEvents::_internal_mutable_new_ttls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.new_ttls_;
}

// -------------------------------------------------------------------

// NewOwner

// string node = 1;
inline void NewOwner::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.ClearToEmpty();
}
inline const std::string& NewOwner::node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewOwner.node)
  return _internal_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewOwner::set_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewOwner.node)
}
inline std::string* NewOwner::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewOwner.node)
  return _s;
}
inline const std::string& NewOwner::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_.Get();
}
inline void NewOwner::_internal_set_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(value, GetArena());
}
inline std::string* NewOwner::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_.Mutable( GetArena());
}
inline std::string* NewOwner::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewOwner.node)
  return _impl_.node_.Release();
}
inline void NewOwner::set_allocated_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewOwner.node)
}

// string label = 2;
inline void NewOwner::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& NewOwner::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewOwner.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewOwner::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewOwner.label)
}
inline std::string* NewOwner::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewOwner.label)
  return _s;
}
inline const std::string& NewOwner::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void NewOwner::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* NewOwner::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* NewOwner::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewOwner.label)
  return _impl_.label_.Release();
}
inline void NewOwner::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewOwner.label)
}

// string owner = 3;
inline void NewOwner::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& NewOwner::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewOwner.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewOwner::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewOwner.owner)
}
inline std::string* NewOwner::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewOwner.owner)
  return _s;
}
inline const std::string& NewOwner::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void NewOwner::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* NewOwner::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* NewOwner::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewOwner.owner)
  return _impl_.owner_.Release();
}
inline void NewOwner::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewOwner.owner)
}

// string block_number = 4;
inline void NewOwner::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& NewOwner::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewOwner.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewOwner::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewOwner.block_number)
}
inline std::string* NewOwner::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewOwner.block_number)
  return _s;
}
inline const std::string& NewOwner::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void NewOwner::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* NewOwner::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* NewOwner::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewOwner.block_number)
  return _impl_.block_number_.Release();
}
inline void NewOwner::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_number_.IsDefault()) {
    _impl_.block_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewOwner.block_number)
}

// string block_hash = 5;
inline void NewOwner::clear_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.ClearToEmpty();
}
inline const std::string& NewOwner::block_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewOwner.block_hash)
  return _internal_block_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewOwner::set_block_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewOwner.block_hash)
}
inline std::string* NewOwner::mutable_block_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewOwner.block_hash)
  return _s;
}
inline const std::string& NewOwner::_internal_block_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_hash_.Get();
}
inline void NewOwner::_internal_set_block_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(value, GetArena());
}
inline std::string* NewOwner::_internal_mutable_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_hash_.Mutable( GetArena());
}
inline std::string* NewOwner::release_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewOwner.block_hash)
  return _impl_.block_hash_.Release();
}
inline void NewOwner::set_allocated_block_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_hash_.IsDefault()) {
    _impl_.block_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewOwner.block_hash)
}

// string transaction_hash = 6;
inline void NewOwner::clear_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.ClearToEmpty();
}
inline const std::string& NewOwner::transaction_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewOwner.transaction_hash)
  return _internal_transaction_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewOwner::set_transaction_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewOwner.transaction_hash)
}
inline std::string* NewOwner::mutable_transaction_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewOwner.transaction_hash)
  return _s;
}
inline const std::string& NewOwner::_internal_transaction_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_hash_.Get();
}
inline void NewOwner::_internal_set_transaction_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(value, GetArena());
}
inline std::string* NewOwner::_internal_mutable_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_hash_.Mutable( GetArena());
}
inline std::string* NewOwner::release_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewOwner.transaction_hash)
  return _impl_.transaction_hash_.Release();
}
inline void NewOwner::set_allocated_transaction_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_hash_.IsDefault()) {
    _impl_.transaction_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewOwner.transaction_hash)
}

// uint32 log_index = 7;
inline void NewOwner::clear_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = 0u;
}
inline ::uint32_t NewOwner::log_index() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NewOwner.log_index)
  return _internal_log_index();
}
inline void NewOwner::set_log_index(::uint32_t value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NewOwner.log_index)
}
inline ::uint32_t NewOwner::_internal_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_index_;
}
inline void NewOwner::_internal_set_log_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = value;
}

// -------------------------------------------------------------------

// NewResolver

// string node = 1;
inline void NewResolver::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.ClearToEmpty();
}
inline const std::string& NewResolver::node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewResolver.node)
  return _internal_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewResolver::set_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewResolver.node)
}
inline std::string* NewResolver::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewResolver.node)
  return _s;
}
inline const std::string& NewResolver::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_.Get();
}
inline void NewResolver::_internal_set_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(value, GetArena());
}
inline std::string* NewResolver::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_.Mutable( GetArena());
}
inline std::string* NewResolver::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewResolver.node)
  return _impl_.node_.Release();
}
inline void NewResolver::set_allocated_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewResolver.node)
}

// string resolver = 2;
inline void NewResolver::clear_resolver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolver_.ClearToEmpty();
}
inline const std::string& NewResolver::resolver() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewResolver.resolver)
  return _internal_resolver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewResolver::set_resolver(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolver_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewResolver.resolver)
}
inline std::string* NewResolver::mutable_resolver() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resolver();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewResolver.resolver)
  return _s;
}
inline const std::string& NewResolver::_internal_resolver() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolver_.Get();
}
inline void NewResolver::_internal_set_resolver(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolver_.Set(value, GetArena());
}
inline std::string* NewResolver::_internal_mutable_resolver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resolver_.Mutable( GetArena());
}
inline std::string* NewResolver::release_resolver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewResolver.resolver)
  return _impl_.resolver_.Release();
}
inline void NewResolver::set_allocated_resolver(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolver_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resolver_.IsDefault()) {
    _impl_.resolver_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewResolver.resolver)
}

// string block_number = 3;
inline void NewResolver::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& NewResolver::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewResolver.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewResolver::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewResolver.block_number)
}
inline std::string* NewResolver::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewResolver.block_number)
  return _s;
}
inline const std::string& NewResolver::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void NewResolver::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* NewResolver::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* NewResolver::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewResolver.block_number)
  return _impl_.block_number_.Release();
}
inline void NewResolver::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_number_.IsDefault()) {
    _impl_.block_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewResolver.block_number)
}

// string block_hash = 4;
inline void NewResolver::clear_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.ClearToEmpty();
}
inline const std::string& NewResolver::block_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewResolver.block_hash)
  return _internal_block_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewResolver::set_block_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewResolver.block_hash)
}
inline std::string* NewResolver::mutable_block_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewResolver.block_hash)
  return _s;
}
inline const std::string& NewResolver::_internal_block_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_hash_.Get();
}
inline void NewResolver::_internal_set_block_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(value, GetArena());
}
inline std::string* NewResolver::_internal_mutable_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_hash_.Mutable( GetArena());
}
inline std::string* NewResolver::release_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewResolver.block_hash)
  return _impl_.block_hash_.Release();
}
inline void NewResolver::set_allocated_block_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_hash_.IsDefault()) {
    _impl_.block_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewResolver.block_hash)
}

// string transaction_hash = 5;
inline void NewResolver::clear_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.ClearToEmpty();
}
inline const std::string& NewResolver::transaction_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewResolver.transaction_hash)
  return _internal_transaction_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewResolver::set_transaction_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewResolver.transaction_hash)
}
inline std::string* NewResolver::mutable_transaction_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewResolver.transaction_hash)
  return _s;
}
inline const std::string& NewResolver::_internal_transaction_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_hash_.Get();
}
inline void NewResolver::_internal_set_transaction_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(value, GetArena());
}
inline std::string* NewResolver::_internal_mutable_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_hash_.Mutable( GetArena());
}
inline std::string* NewResolver::release_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewResolver.transaction_hash)
  return _impl_.transaction_hash_.Release();
}
inline void NewResolver::set_allocated_transaction_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_hash_.IsDefault()) {
    _impl_.transaction_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewResolver.transaction_hash)
}

// uint32 log_index = 6;
inline void NewResolver::clear_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = 0u;
}
inline ::uint32_t NewResolver::log_index() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NewResolver.log_index)
  return _internal_log_index();
}
inline void NewResolver::set_log_index(::uint32_t value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NewResolver.log_index)
}
inline ::uint32_t NewResolver::_internal_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_index_;
}
inline void NewResolver::_internal_set_log_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = value;
}

// -------------------------------------------------------------------

// NewTTL

// string node = 1;
inline void NewTTL::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.ClearToEmpty();
}
inline const std::string& NewTTL::node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewTTL.node)
  return _internal_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewTTL::set_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewTTL.node)
}
inline std::string* NewTTL::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewTTL.node)
  return _s;
}
inline const std::string& NewTTL::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_.Get();
}
inline void NewTTL::_internal_set_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(value, GetArena());
}
inline std::string* NewTTL::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_.Mutable( GetArena());
}
inline std::string* NewTTL::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewTTL.node)
  return _impl_.node_.Release();
}
inline void NewTTL::set_allocated_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewTTL.node)
}

// uint64 ttl = 2;
inline void NewTTL::clear_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = ::uint64_t{0u};
}
inline ::uint64_t NewTTL::ttl() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NewTTL.ttl)
  return _internal_ttl();
}
inline void NewTTL::set_ttl(::uint64_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NewTTL.ttl)
}
inline ::uint64_t NewTTL::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ttl_;
}
inline void NewTTL::_internal_set_ttl(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = value;
}

// string block_number = 3;
inline void NewTTL::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& NewTTL::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewTTL.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewTTL::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewTTL.block_number)
}
inline std::string* NewTTL::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewTTL.block_number)
  return _s;
}
inline const std::string& NewTTL::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void NewTTL::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* NewTTL::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* NewTTL::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewTTL.block_number)
  return _impl_.block_number_.Release();
}
inline void NewTTL::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_number_.IsDefault()) {
    _impl_.block_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewTTL.block_number)
}

// string block_hash = 4;
inline void NewTTL::clear_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.ClearToEmpty();
}
inline const std::string& NewTTL::block_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewTTL.block_hash)
  return _internal_block_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewTTL::set_block_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewTTL.block_hash)
}
inline std::string* NewTTL::mutable_block_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewTTL.block_hash)
  return _s;
}
inline const std::string& NewTTL::_internal_block_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_hash_.Get();
}
inline void NewTTL::_internal_set_block_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(value, GetArena());
}
inline std::string* NewTTL::_internal_mutable_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_hash_.Mutable( GetArena());
}
inline std::string* NewTTL::release_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewTTL.block_hash)
  return _impl_.block_hash_.Release();
}
inline void NewTTL::set_allocated_block_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_hash_.IsDefault()) {
    _impl_.block_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewTTL.block_hash)
}

// string transaction_hash = 5;
inline void NewTTL::clear_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.ClearToEmpty();
}
inline const std::string& NewTTL::transaction_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NewTTL.transaction_hash)
  return _internal_transaction_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewTTL::set_transaction_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NewTTL.transaction_hash)
}
inline std::string* NewTTL::mutable_transaction_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NewTTL.transaction_hash)
  return _s;
}
inline const std::string& NewTTL::_internal_transaction_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_hash_.Get();
}
inline void NewTTL::_internal_set_transaction_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(value, GetArena());
}
inline std::string* NewTTL::_internal_mutable_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_hash_.Mutable( GetArena());
}
inline std::string* NewTTL::release_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NewTTL.transaction_hash)
  return _impl_.transaction_hash_.Release();
}
inline void NewTTL::set_allocated_transaction_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_hash_.IsDefault()) {
    _impl_.transaction_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NewTTL.transaction_hash)
}

// uint32 log_index = 6;
inline void NewTTL::clear_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = 0u;
}
inline ::uint32_t NewTTL::log_index() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NewTTL.log_index)
  return _internal_log_index();
}
inline void NewTTL::set_log_index(::uint32_t value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NewTTL.log_index)
}
inline ::uint32_t NewTTL::_internal_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_index_;
}
inline void NewTTL::_internal_set_log_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = value;
}

// -------------------------------------------------------------------

// RegistrarEvents

// repeated .base_names.v1.NameRegistered name_registered = 1;
inline int RegistrarEvents::_internal_name_registered_size() const {
  return _internal_name_registered().size();
}
inline int RegistrarEvents::name_registered_size() const {
  return _internal_name_registered_size();
}
inline void RegistrarEvents::clear_name_registered() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_registered_.Clear();
}
inline ::base_names::v1::NameRegistered* RegistrarEvents::mutable_name_registered(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.RegistrarEvents.name_registered)
  return _internal_mutable_name_registered()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>* RegistrarEvents::mutable_name_registered()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.RegistrarEvents.name_registered)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_name_registered();
}
inline const ::base_names::v1::NameRegistered& RegistrarEvents::name_registered(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.RegistrarEvents.name_registered)
  return _internal_name_registered().Get(index);
}
inline ::base_names::v1::NameRegistered* RegistrarEvents::add_name_registered() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::NameRegistered* _add = _internal_mutable_name_registered()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.RegistrarEvents.name_registered)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>& RegistrarEvents::name_registered() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.RegistrarEvents.name_registered)
  return _internal_name_registered();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>&
RegistrarEvents::_internal_name_registered() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_registered_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>*
RegistrarEvents::_internal_mutable_name_registered() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.name_registered_;
}

// repeated .base_names.v1.NameRenewed name_renewed = 2;
inline int RegistrarEvents::_internal_name_renewed_size() const {
  return _internal_name_renewed().size();
}
inline int RegistrarEvents::name_renewed_size() const {
  return _internal_name_renewed_size();
}
inline void RegistrarEvents::clear_name_renewed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_renewed_.Clear();
}
inline ::base_names::v1::NameRenewed* RegistrarEvents::mutable_name_renewed(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.RegistrarEvents.name_renewed)
  return _internal_mutable_name_renewed()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>* RegistrarEvents::mutable_name_renewed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.RegistrarEvents.name_renewed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_name_renewed();
}
inline const ::base_names::v1::NameRenewed& RegistrarEvents::name_renewed(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.RegistrarEvents.name_renewed)
  return _internal_name_renewed().Get(index);
}
inline ::base_names::v1::NameRenewed* RegistrarEvents::add_name_renewed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::NameRenewed* _add = _internal_mutable_name_renewed()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.RegistrarEvents.name_renewed)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>& RegistrarEvents::name_renewed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.RegistrarEvents.name_renewed)
  return _internal_name_renewed();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>&
RegistrarEvents::_internal_name_renewed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_renewed_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>*
RegistrarEvents::_internal_mutable_name_renewed() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.name_renewed_;
}

// repeated .base_names.v1.Transfer transfer = 3;
inline int RegistrarEvents::_internal_transfer_size() const {
  return _internal_transfer().size();
}
inline int RegistrarEvents::transfer_size() const {
  return _internal_transfer_size();
}
inline void RegistrarEvents::clear_transfer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transfer_.Clear();
}
inline ::base_names::v1::Transfer* RegistrarEvents::mutable_transfer(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.RegistrarEvents.transfer)
  return _internal_mutable_transfer()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::Transfer>* RegistrarEvents::mutable_transfer()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.RegistrarEvents.transfer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_transfer();
}
inline const ::base_names::v1::Transfer& RegistrarEvents::transfer(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.RegistrarEvents.transfer)
  return _internal_transfer().Get(index);
}
inline ::base_names::v1::Transfer* RegistrarEvents::add_transfer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::Transfer* _add = _internal_mutable_transfer()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.RegistrarEvents.transfer)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::Transfer>& RegistrarEvents::transfer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.RegistrarEvents.transfer)
  return _internal_transfer();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::Transfer>&
RegistrarEvents::_internal_transfer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transfer_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::Transfer>*
RegistrarEvents::_internal_mutable_transfer() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.transfer_;
}

// -------------------------------------------------------------------

// NameRegistered

// string name = 1;
inline void NameRegistered::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NameRegistered::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRegistered::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.name)
}
inline std::string* NameRegistered::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRegistered.name)
  return _s;
}
inline const std::string& NameRegistered::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NameRegistered::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NameRegistered::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NameRegistered::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRegistered.name)
  return _impl_.name_.Release();
}
inline void NameRegistered::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRegistered.name)
}

// string label = 2;
inline void NameRegistered::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& NameRegistered::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRegistered::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.label)
}
inline std::string* NameRegistered::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRegistered.label)
  return _s;
}
inline const std::string& NameRegistered::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void NameRegistered::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* NameRegistered::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* NameRegistered::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRegistered.label)
  return _impl_.label_.Release();
}
inline void NameRegistered::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRegistered.label)
}

// string owner = 3;
inline void NameRegistered::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& NameRegistered::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRegistered::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.owner)
}
inline std::string* NameRegistered::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRegistered.owner)
  return _s;
}
inline const std::string& NameRegistered::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void NameRegistered::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* NameRegistered::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* NameRegistered::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRegistered.owner)
  return _impl_.owner_.Release();
}
inline void NameRegistered::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRegistered.owner)
}

// uint64 cost = 4;
inline void NameRegistered::clear_cost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_ = ::uint64_t{0u};
}
inline ::uint64_t NameRegistered::cost() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.cost)
  return _internal_cost();
}
inline void NameRegistered::set_cost(::uint64_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.cost)
}
inline ::uint64_t NameRegistered::_internal_cost() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cost_;
}
inline void NameRegistered::_internal_set_cost(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_ = value;
}

// uint64 expires = 5;
inline void NameRegistered::clear_expires() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = ::uint64_t{0u};
}
inline ::uint64_t NameRegistered::expires() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.expires)
  return _internal_expires();
}
inline void NameRegistered::set_expires(::uint64_t value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.expires)
}
inline ::uint64_t NameRegistered::_internal_expires() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_;
}
inline void NameRegistered::_internal_set_expires(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = value;
}

// string block_number = 6;
inline void NameRegistered::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& NameRegistered::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRegistered::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.block_number)
}
inline std::string* NameRegistered::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRegistered.block_number)
  return _s;
}
inline const std::string& NameRegistered::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void NameRegistered::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* NameRegistered::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* NameRegistered::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRegistered.block_number)
  return _impl_.block_number_.Release();
}
inline void NameRegistered::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_number_.IsDefault()) {
    _impl_.block_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRegistered.block_number)
}

// string block_hash = 7;
inline void NameRegistered::clear_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.ClearToEmpty();
}
inline const std::string& NameRegistered::block_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.block_hash)
  return _internal_block_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRegistered::set_block_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.block_hash)
}
inline std::string* NameRegistered::mutable_block_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRegistered.block_hash)
  return _s;
}
inline const std::string& NameRegistered::_internal_block_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_hash_.Get();
}
inline void NameRegistered::_internal_set_block_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(value, GetArena());
}
inline std::string* NameRegistered::_internal_mutable_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_hash_.Mutable( GetArena());
}
inline std::string* NameRegistered::release_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRegistered.block_hash)
  return _impl_.block_hash_.Release();
}
inline void NameRegistered::set_allocated_block_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_hash_.IsDefault()) {
    _impl_.block_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRegistered.block_hash)
}

// string transaction_hash = 8;
inline void NameRegistered::clear_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.ClearToEmpty();
}
inline const std::string& NameRegistered::transaction_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.transaction_hash)
  return _internal_transaction_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRegistered::set_transaction_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.transaction_hash)
}
inline std::string* NameRegistered::mutable_transaction_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRegistered.transaction_hash)
  return _s;
}
inline const std::string& NameRegistered::_internal_transaction_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_hash_.Get();
}
inline void NameRegistered::_internal_set_transaction_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(value, GetArena());
}
inline std::string* NameRegistered::_internal_mutable_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_hash_.Mutable( GetArena());
}
inline std::string* NameRegistered::release_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRegistered.transaction_hash)
  return _impl_.transaction_hash_.Release();
}
inline void NameRegistered::set_allocated_transaction_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_hash_.IsDefault()) {
    _impl_.transaction_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRegistered.transaction_hash)
}

// uint32 log_index = 9;
inline void NameRegistered::clear_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = 0u;
}
inline ::uint32_t NameRegistered::log_index() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRegistered.log_index)
  return _internal_log_index();
}
inline void NameRegistered::set_log_index(::uint32_t value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NameRegistered.log_index)
}
inline ::uint32_t NameRegistered::_internal_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_index_;
}
inline void NameRegistered::_internal_set_log_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = value;
}

// -------------------------------------------------------------------

// NameRenewed

// string name = 1;
inline void NameRenewed::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NameRenewed::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRenewed.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRenewed::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRenewed.name)
}
inline std::string* NameRenewed::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRenewed.name)
  return _s;
}
inline const std::string& NameRenewed::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NameRenewed::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NameRenewed::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NameRenewed::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRenewed.name)
  return _impl_.name_.Release();
}
inline void NameRenewed::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRenewed.name)
}

// string label = 2;
inline void NameRenewed::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& NameRenewed::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRenewed.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRenewed::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRenewed.label)
}
inline std::string* NameRenewed::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRenewed.label)
  return _s;
}
inline const std::string& NameRenewed::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void NameRenewed::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* NameRenewed::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* NameRenewed::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRenewed.label)
  return _impl_.label_.Release();
}
inline void NameRenewed::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRenewed.label)
}

// uint64 cost = 3;
inline void NameRenewed::clear_cost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_ = ::uint64_t{0u};
}
inline ::uint64_t NameRenewed::cost() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRenewed.cost)
  return _internal_cost();
}
inline void NameRenewed::set_cost(::uint64_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NameRenewed.cost)
}
inline ::uint64_t NameRenewed::_internal_cost() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cost_;
}
inline void NameRenewed::_internal_set_cost(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_ = value;
}

// uint64 expires = 4;
inline void NameRenewed::clear_expires() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = ::uint64_t{0u};
}
inline ::uint64_t NameRenewed::expires() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRenewed.expires)
  return _internal_expires();
}
inline void NameRenewed::set_expires(::uint64_t value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NameRenewed.expires)
}
inline ::uint64_t NameRenewed::_internal_expires() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_;
}
inline void NameRenewed::_internal_set_expires(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = value;
}

// string block_number = 5;
inline void NameRenewed::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& NameRenewed::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRenewed.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRenewed::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRenewed.block_number)
}
inline std::string* NameRenewed::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRenewed.block_number)
  return _s;
}
inline const std::string& NameRenewed::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void NameRenewed::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* NameRenewed::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* NameRenewed::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRenewed.block_number)
  return _impl_.block_number_.Release();
}
inline void NameRenewed::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_number_.IsDefault()) {
    _impl_.block_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRenewed.block_number)
}

// string block_hash = 6;
inline void NameRenewed::clear_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.ClearToEmpty();
}
inline const std::string& NameRenewed::block_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRenewed.block_hash)
  return _internal_block_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRenewed::set_block_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRenewed.block_hash)
}
inline std::string* NameRenewed::mutable_block_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRenewed.block_hash)
  return _s;
}
inline const std::string& NameRenewed::_internal_block_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_hash_.Get();
}
inline void NameRenewed::_internal_set_block_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(value, GetArena());
}
inline std::string* NameRenewed::_internal_mutable_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_hash_.Mutable( GetArena());
}
inline std::string* NameRenewed::release_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRenewed.block_hash)
  return _impl_.block_hash_.Release();
}
inline void NameRenewed::set_allocated_block_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_hash_.IsDefault()) {
    _impl_.block_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRenewed.block_hash)
}

// string transaction_hash = 7;
inline void NameRenewed::clear_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.ClearToEmpty();
}
inline const std::string& NameRenewed::transaction_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRenewed.transaction_hash)
  return _internal_transaction_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameRenewed::set_transaction_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.NameRenewed.transaction_hash)
}
inline std::string* NameRenewed::mutable_transaction_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.NameRenewed.transaction_hash)
  return _s;
}
inline const std::string& NameRenewed::_internal_transaction_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_hash_.Get();
}
inline void NameRenewed::_internal_set_transaction_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(value, GetArena());
}
inline std::string* NameRenewed::_internal_mutable_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_hash_.Mutable( GetArena());
}
inline std::string* NameRenewed::release_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.NameRenewed.transaction_hash)
  return _impl_.transaction_hash_.Release();
}
inline void NameRenewed::set_allocated_transaction_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_hash_.IsDefault()) {
    _impl_.transaction_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.NameRenewed.transaction_hash)
}

// uint32 log_index = 8;
inline void NameRenewed::clear_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = 0u;
}
inline ::uint32_t NameRenewed::log_index() const {
  // @@protoc_insertion_point(field_get:base_names.v1.NameRenewed.log_index)
  return _internal_log_index();
}
inline void NameRenewed::set_log_index(::uint32_t value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:base_names.v1.NameRenewed.log_index)
}
inline ::uint32_t NameRenewed::_internal_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_index_;
}
inline void NameRenewed::_internal_set_log_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = value;
}

// -------------------------------------------------------------------

// Transfer

// string from = 1;
inline void Transfer::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_.ClearToEmpty();
}
inline const std::string& Transfer::from() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Transfer.from)
  return _internal_from();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transfer::set_from(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Transfer.from)
}
inline std::string* Transfer::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Transfer.from)
  return _s;
}
inline const std::string& Transfer::_internal_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_.Get();
}
inline void Transfer::_internal_set_from(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_.Set(value, GetArena());
}
inline std::string* Transfer::_internal_mutable_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.from_.Mutable( GetArena());
}
inline std::string* Transfer::release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Transfer.from)
  return _impl_.from_.Release();
}
inline void Transfer::set_allocated_from(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Transfer.from)
}

// string to = 2;
inline void Transfer::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_.ClearToEmpty();
}
inline const std::string& Transfer::to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Transfer.to)
  return _internal_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transfer::set_to(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Transfer.to)
}
inline std::string* Transfer::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Transfer.to)
  return _s;
}
inline const std::string& Transfer::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_.Get();
}
inline void Transfer::_internal_set_to(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_.Set(value, GetArena());
}
inline std::string* Transfer::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_.Mutable( GetArena());
}
inline std::string* Transfer::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Transfer.to)
  return _impl_.to_.Release();
}
inline void Transfer::set_allocated_to(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Transfer.to)
}

// string token_id = 3;
inline void Transfer::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& Transfer::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Transfer.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transfer::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Transfer.token_id)
}
inline std::string* Transfer::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Transfer.token_id)
  return _s;
}
inline const std::string& Transfer::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void Transfer::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* Transfer::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* Transfer::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Transfer.token_id)
  return _impl_.token_id_.Release();
}
inline void Transfer::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Transfer.token_id)
}

// string block_number = 4;
inline void Transfer::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& Transfer::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Transfer.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transfer::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Transfer.block_number)
}
inline std::string* Transfer::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Transfer.block_number)
  return _s;
}
inline const std::string& Transfer::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void Transfer::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* Transfer::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* Transfer::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Transfer.block_number)
  return _impl_.block_number_.Release();
}
inline void Transfer::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_number_.IsDefault()) {
    _impl_.block_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Transfer.block_number)
}

// string block_hash = 5;
inline void Transfer::clear_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.ClearToEmpty();
}
inline const std::string& Transfer::block_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Transfer.block_hash)
  return _internal_block_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transfer::set_block_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Transfer.block_hash)
}
inline std::string* Transfer::mutable_block_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Transfer.block_hash)
  return _s;
}
inline const std::string& Transfer::_internal_block_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_hash_.Get();
}
inline void Transfer::_internal_set_block_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(value, GetArena());
}
inline std::string* Transfer::_internal_mutable_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_hash_.Mutable( GetArena());
}
inline std::string* Transfer::release_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Transfer.block_hash)
  return _impl_.block_hash_.Release();
}
inline void Transfer::set_allocated_block_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_hash_.IsDefault()) {
    _impl_.block_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Transfer.block_hash)
}

// string transaction_hash = 6;
inline void Transfer::clear_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.ClearToEmpty();
}
inline const std::string& Transfer::transaction_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Transfer.transaction_hash)
  return _internal_transaction_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transfer::set_transaction_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Transfer.transaction_hash)
}
inline std::string* Transfer::mutable_transaction_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Transfer.transaction_hash)
  return _s;
}
inline const std::string& Transfer::_internal_transaction_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_hash_.Get();
}
inline void Transfer::_internal_set_transaction_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(value, GetArena());
}
inline std::string* Transfer::_internal_mutable_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_hash_.Mutable( GetArena());
}
inline std::string* Transfer::release_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Transfer.transaction_hash)
  return _impl_.transaction_hash_.Release();
}
inline void Transfer::set_allocated_transaction_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_hash_.IsDefault()) {
    _impl_.transaction_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Transfer.transaction_hash)
}

// uint32 log_index = 7;
inline void Transfer::clear_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = 0u;
}
inline ::uint32_t Transfer::log_index() const {
  // @@protoc_insertion_point(field_get:base_names.v1.Transfer.log_index)
  return _internal_log_index();
}
inline void Transfer::set_log_index(::uint32_t value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:base_names.v1.Transfer.log_index)
}
inline ::uint32_t Transfer::_internal_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_index_;
}
inline void Transfer::_internal_set_log_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = value;
}

// -------------------------------------------------------------------

// ControllerEvents

// repeated .base_names.v1.NameRegistered controller_name_registered = 1;
inline int ControllerEvents::_internal_controller_name_registered_size() const {
  return _internal_controller_name_registered().size();
}
inline int ControllerEvents::controller_name_registered_size() const {
  return _internal_controller_name_registered_size();
}
inline void ControllerEvents::clear_controller_name_registered() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controller_name_registered_.Clear();
}
inline ::base_names::v1::NameRegistered* ControllerEvents::mutable_controller_name_registered(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.ControllerEvents.controller_name_registered)
  return _internal_mutable_controller_name_registered()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>* ControllerEvents::mutable_controller_name_registered()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.ControllerEvents.controller_name_registered)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_controller_name_registered();
}
inline const ::base_names::v1::NameRegistered& ControllerEvents::controller_name_registered(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ControllerEvents.controller_name_registered)
  return _internal_controller_name_registered().Get(index);
}
inline ::base_names::v1::NameRegistered* ControllerEvents::add_controller_name_registered() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::NameRegistered* _add = _internal_mutable_controller_name_registered()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.ControllerEvents.controller_name_registered)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>& ControllerEvents::controller_name_registered() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.ControllerEvents.controller_name_registered)
  return _internal_controller_name_registered();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>&
ControllerEvents::_internal_controller_name_registered() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.controller_name_registered_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRegistered>*
ControllerEvents::_internal_mutable_controller_name_registered() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.controller_name_registered_;
}

// repeated .base_names.v1.NameRenewed controller_name_renewed = 2;
inline int ControllerEvents::_internal_controller_name_renewed_size() const {
  return _internal_controller_name_renewed().size();
}
inline int ControllerEvents::controller_name_renewed_size() const {
  return _internal_controller_name_renewed_size();
}
inline void ControllerEvents::clear_controller_name_renewed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controller_name_renewed_.Clear();
}
inline ::base_names::v1::NameRenewed* ControllerEvents::mutable_controller_name_renewed(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.ControllerEvents.controller_name_renewed)
  return _internal_mutable_controller_name_renewed()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>* ControllerEvents::mutable_controller_name_renewed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.ControllerEvents.controller_name_renewed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_controller_name_renewed();
}
inline const ::base_names::v1::NameRenewed& ControllerEvents::controller_name_renewed(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ControllerEvents.controller_name_renewed)
  return _internal_controller_name_renewed().Get(index);
}
inline ::base_names::v1::NameRenewed* ControllerEvents::add_controller_name_renewed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::NameRenewed* _add = _internal_mutable_controller_name_renewed()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.ControllerEvents.controller_name_renewed)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>& ControllerEvents::controller_name_renewed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.ControllerEvents.controller_name_renewed)
  return _internal_controller_name_renewed();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>&
ControllerEvents::_internal_controller_name_renewed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.controller_name_renewed_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::NameRenewed>*
ControllerEvents::_internal_mutable_controller_name_renewed() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.controller_name_renewed_;
}

// -------------------------------------------------------------------

// ReverseEvents

// repeated .base_names.v1.ReverseClaimed reverse_claimed = 1;
inline int ReverseEvents::_internal_reverse_claimed_size() const {
  return _internal_reverse_claimed().size();
}
inline int ReverseEvents::reverse_claimed_size() const {
  return _internal_reverse_claimed_size();
}
inline void ReverseEvents::clear_reverse_claimed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_claimed_.Clear();
}
inline ::base_names::v1::ReverseClaimed* ReverseEvents::mutable_reverse_claimed(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseEvents.reverse_claimed)
  return _internal_mutable_reverse_claimed()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::ReverseClaimed>* ReverseEvents::mutable_reverse_claimed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:base_names.v1.ReverseEvents.reverse_claimed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_reverse_claimed();
}
inline const ::base_names::v1::ReverseClaimed& ReverseEvents::reverse_claimed(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseEvents.reverse_claimed)
  return _internal_reverse_claimed().Get(index);
}
inline ::base_names::v1::ReverseClaimed* ReverseEvents::add_reverse_claimed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::base_names::v1::ReverseClaimed* _add = _internal_mutable_reverse_claimed()->Add();
  // @@protoc_insertion_point(field_add:base_names.v1.ReverseEvents.reverse_claimed)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::ReverseClaimed>& ReverseEvents::reverse_claimed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:base_names.v1.ReverseEvents.reverse_claimed)
  return _internal_reverse_claimed();
}
inline const ::google::protobuf::RepeatedPtrField<::base_names::v1::ReverseClaimed>&
ReverseEvents::_internal_reverse_claimed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reverse_claimed_;
}
inline ::google::protobuf::RepeatedPtrField<::base_names::v1::ReverseClaimed>*
ReverseEvents::_internal_mutable_reverse_claimed() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.reverse_claimed_;
}

// -------------------------------------------------------------------

// ReverseClaimed

// string addr = 1;
inline void ReverseClaimed::clear_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& ReverseClaimed::addr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseClaimed.addr)
  return _internal_addr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseClaimed::set_addr(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.addr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseClaimed.addr)
}
inline std::string* ReverseClaimed::mutable_addr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseClaimed.addr)
  return _s;
}
inline const std::string& ReverseClaimed::_internal_addr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.addr_.Get();
}
inline void ReverseClaimed::_internal_set_addr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.addr_.Set(value, GetArena());
}
inline std::string* ReverseClaimed::_internal_mutable_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.addr_.Mutable( GetArena());
}
inline std::string* ReverseClaimed::release_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseClaimed.addr)
  return _impl_.addr_.Release();
}
inline void ReverseClaimed::set_allocated_addr(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.addr_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseClaimed.addr)
}

// string node = 2;
inline void ReverseClaimed::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.ClearToEmpty();
}
inline const std::string& ReverseClaimed::node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseClaimed.node)
  return _internal_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseClaimed::set_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseClaimed.node)
}
inline std::string* ReverseClaimed::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseClaimed.node)
  return _s;
}
inline const std::string& ReverseClaimed::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_.Get();
}
inline void ReverseClaimed::_internal_set_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(value, GetArena());
}
inline std::string* ReverseClaimed::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_.Mutable( GetArena());
}
inline std::string* ReverseClaimed::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseClaimed.node)
  return _impl_.node_.Release();
}
inline void ReverseClaimed::set_allocated_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseClaimed.node)
}

// string owner = 3;
inline void ReverseClaimed::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& ReverseClaimed::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseClaimed.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseClaimed::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseClaimed.owner)
}
inline std::string* ReverseClaimed::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseClaimed.owner)
  return _s;
}
inline const std::string& ReverseClaimed::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void ReverseClaimed::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* ReverseClaimed::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* ReverseClaimed::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseClaimed.owner)
  return _impl_.owner_.Release();
}
inline void ReverseClaimed::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseClaimed.owner)
}

// string block_number = 4;
inline void ReverseClaimed::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& ReverseClaimed::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseClaimed.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseClaimed::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseClaimed.block_number)
}
inline std::string* ReverseClaimed::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseClaimed.block_number)
  return _s;
}
inline const std::string& ReverseClaimed::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void ReverseClaimed::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* ReverseClaimed::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* ReverseClaimed::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseClaimed.block_number)
  return _impl_.block_number_.Release();
}
inline void ReverseClaimed::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_number_.IsDefault()) {
    _impl_.block_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseClaimed.block_number)
}

// string block_hash = 5;
inline void ReverseClaimed::clear_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.ClearToEmpty();
}
inline const std::string& ReverseClaimed::block_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseClaimed.block_hash)
  return _internal_block_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseClaimed::set_block_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseClaimed.block_hash)
}
inline std::string* ReverseClaimed::mutable_block_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseClaimed.block_hash)
  return _s;
}
inline const std::string& ReverseClaimed::_internal_block_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_hash_.Get();
}
inline void ReverseClaimed::_internal_set_block_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(value, GetArena());
}
inline std::string* ReverseClaimed::_internal_mutable_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_hash_.Mutable( GetArena());
}
inline std::string* ReverseClaimed::release_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseClaimed.block_hash)
  return _impl_.block_hash_.Release();
}
inline void ReverseClaimed::set_allocated_block_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_hash_.IsDefault()) {
    _impl_.block_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseClaimed.block_hash)
}

// string transaction_hash = 6;
inline void ReverseClaimed::clear_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.ClearToEmpty();
}
inline const std::string& ReverseClaimed::transaction_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseClaimed.transaction_hash)
  return _internal_transaction_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseClaimed::set_transaction_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseClaimed.transaction_hash)
}
inline std::string* ReverseClaimed::mutable_transaction_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseClaimed.transaction_hash)
  return _s;
}
inline const std::string& ReverseClaimed::_internal_transaction_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_hash_.Get();
}
inline void ReverseClaimed::_internal_set_transaction_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(value, GetArena());
}
inline std::string* ReverseClaimed::_internal_mutable_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_hash_.Mutable( GetArena());
}
inline std::string* ReverseClaimed::release_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseClaimed.transaction_hash)
  return _impl_.transaction_hash_.Release();
}
inline void ReverseClaimed::set_allocated_transaction_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_hash_.IsDefault()) {
    _impl_.transaction_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseClaimed.transaction_hash)
}

// uint32 log_index = 7;
inline void ReverseClaimed::clear_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = 0u;
}
inline ::uint32_t ReverseClaimed::log_index() const {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseClaimed.log_index)
  return _internal_log_index();
}
inline void ReverseClaimed::set_log_index(::uint32_t value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseClaimed.log_index)
}
inline ::uint32_t ReverseClaimed::_internal_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_index_;
}
inline void ReverseClaimed::_internal_set_log_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = value;
}

// -------------------------------------------------------------------

// Domain

// string id = 1;
inline void Domain::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Domain::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.id)
}
inline std::string* Domain::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.id)
  return _s;
}
inline const std::string& Domain::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Domain::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Domain::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.id)
  return _impl_.id_.Release();
}
inline void Domain::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.id)
}

// string name = 2;
inline void Domain::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Domain::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.name)
}
inline std::string* Domain::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.name)
  return _s;
}
inline const std::string& Domain::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Domain::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Domain::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.name)
  return _impl_.name_.Release();
}
inline void Domain::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.name)
}

// string label_name = 3;
inline void Domain::clear_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.ClearToEmpty();
}
inline const std::string& Domain::label_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.label_name)
  return _internal_label_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_label_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.label_name)
}
inline std::string* Domain::mutable_label_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label_name();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.label_name)
  return _s;
}
inline const std::string& Domain::_internal_label_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_name_.Get();
}
inline void Domain::_internal_set_label_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_name_.Mutable( GetArena());
}
inline std::string* Domain::release_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.label_name)
  return _impl_.label_name_.Release();
}
inline void Domain::set_allocated_label_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_name_.IsDefault()) {
    _impl_.label_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.label_name)
}

// string label_hash = 4;
inline void Domain::clear_label_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_hash_.ClearToEmpty();
}
inline const std::string& Domain::label_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.label_hash)
  return _internal_label_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_label_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.label_hash)
}
inline std::string* Domain::mutable_label_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.label_hash)
  return _s;
}
inline const std::string& Domain::_internal_label_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_hash_.Get();
}
inline void Domain::_internal_set_label_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_hash_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_label_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_hash_.Mutable( GetArena());
}
inline std::string* Domain::release_label_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.label_hash)
  return _impl_.label_hash_.Release();
}
inline void Domain::set_allocated_label_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_hash_.IsDefault()) {
    _impl_.label_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.label_hash)
}

// string parent = 5;
inline void Domain::clear_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& Domain::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_parent(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.parent)
}
inline std::string* Domain::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.parent)
  return _s;
}
inline const std::string& Domain::_internal_parent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_.Get();
}
inline void Domain::_internal_set_parent(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* Domain::release_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.parent)
  return _impl_.parent_.Release();
}
inline void Domain::set_allocated_parent(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.parent_.IsDefault()) {
    _impl_.parent_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.parent)
}

// string subdomain_count = 6;
inline void Domain::clear_subdomain_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subdomain_count_.ClearToEmpty();
}
inline const std::string& Domain::subdomain_count() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.subdomain_count)
  return _internal_subdomain_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_subdomain_count(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subdomain_count_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.subdomain_count)
}
inline std::string* Domain::mutable_subdomain_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subdomain_count();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.subdomain_count)
  return _s;
}
inline const std::string& Domain::_internal_subdomain_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subdomain_count_.Get();
}
inline void Domain::_internal_set_subdomain_count(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subdomain_count_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_subdomain_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subdomain_count_.Mutable( GetArena());
}
inline std::string* Domain::release_subdomain_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.subdomain_count)
  return _impl_.subdomain_count_.Release();
}
inline void Domain::set_allocated_subdomain_count(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subdomain_count_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subdomain_count_.IsDefault()) {
    _impl_.subdomain_count_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.subdomain_count)
}

// string resolved_address = 7;
inline void Domain::clear_resolved_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_address_.ClearToEmpty();
}
inline const std::string& Domain::resolved_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.resolved_address)
  return _internal_resolved_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_resolved_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.resolved_address)
}
inline std::string* Domain::mutable_resolved_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resolved_address();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.resolved_address)
  return _s;
}
inline const std::string& Domain::_internal_resolved_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolved_address_.Get();
}
inline void Domain::_internal_set_resolved_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_address_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_resolved_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resolved_address_.Mutable( GetArena());
}
inline std::string* Domain::release_resolved_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.resolved_address)
  return _impl_.resolved_address_.Release();
}
inline void Domain::set_allocated_resolved_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resolved_address_.IsDefault()) {
    _impl_.resolved_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.resolved_address)
}

// string owner = 8;
inline void Domain::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& Domain::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.owner)
}
inline std::string* Domain::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.owner)
  return _s;
}
inline const std::string& Domain::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void Domain::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* Domain::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.owner)
  return _impl_.owner_.Release();
}
inline void Domain::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.owner)
}

// string resolver = 9;
inline void Domain::clear_resolver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolver_.ClearToEmpty();
}
inline const std::string& Domain::resolver() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.resolver)
  return _internal_resolver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_resolver(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolver_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.resolver)
}
inline std::string* Domain::mutable_resolver() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resolver();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.resolver)
  return _s;
}
inline const std::string& Domain::_internal_resolver() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolver_.Get();
}
inline void Domain::_internal_set_resolver(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolver_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_resolver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resolver_.Mutable( GetArena());
}
inline std::string* Domain::release_resolver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.resolver)
  return _impl_.resolver_.Release();
}
inline void Domain::set_allocated_resolver(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolver_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resolver_.IsDefault()) {
    _impl_.resolver_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.resolver)
}

// uint64 ttl = 10;
inline void Domain::clear_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = ::uint64_t{0u};
}
inline ::uint64_t Domain::ttl() const {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.ttl)
  return _internal_ttl();
}
inline void Domain::set_ttl(::uint64_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.ttl)
}
inline ::uint64_t Domain::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ttl_;
}
inline void Domain::_internal_set_ttl(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = value;
}

// bool is_migrated = 11;
inline void Domain::clear_is_migrated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_migrated_ = false;
}
inline bool Domain::is_migrated() const {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.is_migrated)
  return _internal_is_migrated();
}
inline void Domain::set_is_migrated(bool value) {
  _internal_set_is_migrated(value);
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.is_migrated)
}
inline bool Domain::_internal_is_migrated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_migrated_;
}
inline void Domain::_internal_set_is_migrated(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_migrated_ = value;
}

// uint64 created_at = 12;
inline void Domain::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_ = ::uint64_t{0u};
}
inline ::uint64_t Domain::created_at() const {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.created_at)
  return _internal_created_at();
}
inline void Domain::set_created_at(::uint64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.created_at)
}
inline ::uint64_t Domain::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_;
}
inline void Domain::_internal_set_created_at(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_ = value;
}

// string subdomain_count_updated_at = 13;
inline void Domain::clear_subdomain_count_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subdomain_count_updated_at_.ClearToEmpty();
}
inline const std::string& Domain::subdomain_count_updated_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Domain.subdomain_count_updated_at)
  return _internal_subdomain_count_updated_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Domain::set_subdomain_count_updated_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subdomain_count_updated_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Domain.subdomain_count_updated_at)
}
inline std::string* Domain::mutable_subdomain_count_updated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subdomain_count_updated_at();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Domain.subdomain_count_updated_at)
  return _s;
}
inline const std::string& Domain::_internal_subdomain_count_updated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subdomain_count_updated_at_.Get();
}
inline void Domain::_internal_set_subdomain_count_updated_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subdomain_count_updated_at_.Set(value, GetArena());
}
inline std::string* Domain::_internal_mutable_subdomain_count_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subdomain_count_updated_at_.Mutable( GetArena());
}
inline std::string* Domain::release_subdomain_count_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Domain.subdomain_count_updated_at)
  return _impl_.subdomain_count_updated_at_.Release();
}
inline void Domain::set_allocated_subdomain_count_updated_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subdomain_count_updated_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subdomain_count_updated_at_.IsDefault()) {
    _impl_.subdomain_count_updated_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Domain.subdomain_count_updated_at)
}

// -------------------------------------------------------------------

// Registration

// string id = 1;
inline void Registration::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Registration::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.id)
}
inline std::string* Registration::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.id)
  return _s;
}
inline const std::string& Registration::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Registration::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Registration::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.id)
  return _impl_.id_.Release();
}
inline void Registration::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.id)
}

// string domain = 2;
inline void Registration::clear_domain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& Registration::domain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.domain)
  return _internal_domain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_domain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.domain)
}
inline std::string* Registration::mutable_domain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.domain)
  return _s;
}
inline const std::string& Registration::_internal_domain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.domain_.Get();
}
inline void Registration::_internal_set_domain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_domain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.domain_.Mutable( GetArena());
}
inline std::string* Registration::release_domain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.domain)
  return _impl_.domain_.Release();
}
inline void Registration::set_allocated_domain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.domain)
}

// string registration_date = 3;
inline void Registration::clear_registration_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registration_date_.ClearToEmpty();
}
inline const std::string& Registration::registration_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.registration_date)
  return _internal_registration_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_registration_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registration_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.registration_date)
}
inline std::string* Registration::mutable_registration_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_registration_date();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.registration_date)
  return _s;
}
inline const std::string& Registration::_internal_registration_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.registration_date_.Get();
}
inline void Registration::_internal_set_registration_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registration_date_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_registration_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.registration_date_.Mutable( GetArena());
}
inline std::string* Registration::release_registration_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.registration_date)
  return _impl_.registration_date_.Release();
}
inline void Registration::set_allocated_registration_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registration_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.registration_date_.IsDefault()) {
    _impl_.registration_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.registration_date)
}

// string expiry_date = 4;
inline void Registration::clear_expiry_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_date_.ClearToEmpty();
}
inline const std::string& Registration::expiry_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.expiry_date)
  return _internal_expiry_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_expiry_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.expiry_date)
}
inline std::string* Registration::mutable_expiry_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiry_date();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.expiry_date)
  return _s;
}
inline const std::string& Registration::_internal_expiry_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiry_date_.Get();
}
inline void Registration::_internal_set_expiry_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_date_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_expiry_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expiry_date_.Mutable( GetArena());
}
inline std::string* Registration::release_expiry_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.expiry_date)
  return _impl_.expiry_date_.Release();
}
inline void Registration::set_allocated_expiry_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.expiry_date_.IsDefault()) {
    _impl_.expiry_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.expiry_date)
}

// string cost = 5;
inline void Registration::clear_cost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_.ClearToEmpty();
}
inline const std::string& Registration::cost() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.cost)
  return _internal_cost();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_cost(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.cost)
}
inline std::string* Registration::mutable_cost() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cost();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.cost)
  return _s;
}
inline const std::string& Registration::_internal_cost() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cost_.Get();
}
inline void Registration::_internal_set_cost(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_cost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cost_.Mutable( GetArena());
}
inline std::string* Registration::release_cost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.cost)
  return _impl_.cost_.Release();
}
inline void Registration::set_allocated_cost(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cost_.IsDefault()) {
    _impl_.cost_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.cost)
}

// string label_name = 6;
inline void Registration::clear_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.ClearToEmpty();
}
inline const std::string& Registration::label_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.label_name)
  return _internal_label_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_label_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.label_name)
}
inline std::string* Registration::mutable_label_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label_name();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.label_name)
  return _s;
}
inline const std::string& Registration::_internal_label_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_name_.Get();
}
inline void Registration::_internal_set_label_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_name_.Mutable( GetArena());
}
inline std::string* Registration::release_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.label_name)
  return _impl_.label_name_.Release();
}
inline void Registration::set_allocated_label_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_name_.IsDefault()) {
    _impl_.label_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.label_name)
}

// string label_hash = 7;
inline void Registration::clear_label_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_hash_.ClearToEmpty();
}
inline const std::string& Registration::label_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.label_hash)
  return _internal_label_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_label_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.label_hash)
}
inline std::string* Registration::mutable_label_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.label_hash)
  return _s;
}
inline const std::string& Registration::_internal_label_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_hash_.Get();
}
inline void Registration::_internal_set_label_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_hash_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_label_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_hash_.Mutable( GetArena());
}
inline std::string* Registration::release_label_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.label_hash)
  return _impl_.label_hash_.Release();
}
inline void Registration::set_allocated_label_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_hash_.IsDefault()) {
    _impl_.label_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.label_hash)
}

// string registrant = 8;
inline void Registration::clear_registrant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registrant_.ClearToEmpty();
}
inline const std::string& Registration::registrant() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.registrant)
  return _internal_registrant();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_registrant(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registrant_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.registrant)
}
inline std::string* Registration::mutable_registrant() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_registrant();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.registrant)
  return _s;
}
inline const std::string& Registration::_internal_registrant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.registrant_.Get();
}
inline void Registration::_internal_set_registrant(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registrant_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_registrant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.registrant_.Mutable( GetArena());
}
inline std::string* Registration::release_registrant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.registrant)
  return _impl_.registrant_.Release();
}
inline void Registration::set_allocated_registrant(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.registrant_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.registrant_.IsDefault()) {
    _impl_.registrant_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.registrant)
}

// string label_owner = 9;
inline void Registration::clear_label_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_owner_.ClearToEmpty();
}
inline const std::string& Registration::label_owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.Registration.label_owner)
  return _internal_label_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registration::set_label_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.Registration.label_owner)
}
inline std::string* Registration::mutable_label_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label_owner();
  // @@protoc_insertion_point(field_mutable:base_names.v1.Registration.label_owner)
  return _s;
}
inline const std::string& Registration::_internal_label_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_owner_.Get();
}
inline void Registration::_internal_set_label_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_owner_.Set(value, GetArena());
}
inline std::string* Registration::_internal_mutable_label_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_owner_.Mutable( GetArena());
}
inline std::string* Registration::release_label_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.Registration.label_owner)
  return _impl_.label_owner_.Release();
}
inline void Registration::set_allocated_label_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_owner_.IsDefault()) {
    _impl_.label_owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.Registration.label_owner)
}

// -------------------------------------------------------------------

// ReverseRegistration

// string id = 1;
inline void ReverseRegistration::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ReverseRegistration::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseRegistration.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseRegistration::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseRegistration.id)
}
inline std::string* ReverseRegistration::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseRegistration.id)
  return _s;
}
inline const std::string& ReverseRegistration::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void ReverseRegistration::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ReverseRegistration::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ReverseRegistration::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseRegistration.id)
  return _impl_.id_.Release();
}
inline void ReverseRegistration::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseRegistration.id)
}

// string domain = 2;
inline void ReverseRegistration::clear_domain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& ReverseRegistration::domain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseRegistration.domain)
  return _internal_domain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseRegistration::set_domain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseRegistration.domain)
}
inline std::string* ReverseRegistration::mutable_domain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseRegistration.domain)
  return _s;
}
inline const std::string& ReverseRegistration::_internal_domain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.domain_.Get();
}
inline void ReverseRegistration::_internal_set_domain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_.Set(value, GetArena());
}
inline std::string* ReverseRegistration::_internal_mutable_domain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.domain_.Mutable( GetArena());
}
inline std::string* ReverseRegistration::release_domain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseRegistration.domain)
  return _impl_.domain_.Release();
}
inline void ReverseRegistration::set_allocated_domain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseRegistration.domain)
}

// string address = 3;
inline void ReverseRegistration::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ReverseRegistration::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseRegistration.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseRegistration::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseRegistration.address)
}
inline std::string* ReverseRegistration::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseRegistration.address)
  return _s;
}
inline const std::string& ReverseRegistration::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void ReverseRegistration::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* ReverseRegistration::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* ReverseRegistration::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseRegistration.address)
  return _impl_.address_.Release();
}
inline void ReverseRegistration::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseRegistration.address)
}

// string block_number = 4;
inline void ReverseRegistration::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& ReverseRegistration::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseRegistration.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseRegistration::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseRegistration.block_number)
}
inline std::string* ReverseRegistration::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseRegistration.block_number)
  return _s;
}
inline const std::string& ReverseRegistration::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void ReverseRegistration::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* ReverseRegistration::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* ReverseRegistration::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseRegistration.block_number)
  return _impl_.block_number_.Release();
}
inline void ReverseRegistration::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_number_.IsDefault()) {
    _impl_.block_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseRegistration.block_number)
}

// string block_hash = 5;
inline void ReverseRegistration::clear_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.ClearToEmpty();
}
inline const std::string& ReverseRegistration::block_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseRegistration.block_hash)
  return _internal_block_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseRegistration::set_block_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseRegistration.block_hash)
}
inline std::string* ReverseRegistration::mutable_block_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseRegistration.block_hash)
  return _s;
}
inline const std::string& ReverseRegistration::_internal_block_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_hash_.Get();
}
inline void ReverseRegistration::_internal_set_block_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.Set(value, GetArena());
}
inline std::string* ReverseRegistration::_internal_mutable_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_hash_.Mutable( GetArena());
}
inline std::string* ReverseRegistration::release_block_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseRegistration.block_hash)
  return _impl_.block_hash_.Release();
}
inline void ReverseRegistration::set_allocated_block_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_hash_.IsDefault()) {
    _impl_.block_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseRegistration.block_hash)
}

// string transaction_hash = 6;
inline void ReverseRegistration::clear_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.ClearToEmpty();
}
inline const std::string& ReverseRegistration::transaction_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseRegistration.transaction_hash)
  return _internal_transaction_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReverseRegistration::set_transaction_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseRegistration.transaction_hash)
}
inline std::string* ReverseRegistration::mutable_transaction_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_hash();
  // @@protoc_insertion_point(field_mutable:base_names.v1.ReverseRegistration.transaction_hash)
  return _s;
}
inline const std::string& ReverseRegistration::_internal_transaction_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_hash_.Get();
}
inline void ReverseRegistration::_internal_set_transaction_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.Set(value, GetArena());
}
inline std::string* ReverseRegistration::_internal_mutable_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_hash_.Mutable( GetArena());
}
inline std::string* ReverseRegistration::release_transaction_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:base_names.v1.ReverseRegistration.transaction_hash)
  return _impl_.transaction_hash_.Release();
}
inline void ReverseRegistration::set_allocated_transaction_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_hash_.IsDefault()) {
    _impl_.transaction_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:base_names.v1.ReverseRegistration.transaction_hash)
}

// uint32 log_index = 7;
inline void ReverseRegistration::clear_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = 0u;
}
inline ::uint32_t ReverseRegistration::log_index() const {
  // @@protoc_insertion_point(field_get:base_names.v1.ReverseRegistration.log_index)
  return _internal_log_index();
}
inline void ReverseRegistration::set_log_index(::uint32_t value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:base_names.v1.ReverseRegistration.log_index)
}
inline ::uint32_t ReverseRegistration::_internal_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_index_;
}
inline void ReverseRegistration::_internal_set_log_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_index_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace base_names


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // base_5fnames_2eproto_2epb_2eh
